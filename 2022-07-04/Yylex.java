/* The following code was generated by JFlex 1.6.1 */

import java_cup.runtime.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>scanner.jflex</tt>
 */
class Yylex implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\74\1\73\1\75\1\75\1\72\22\0\1\74\1\64\1\7"+
    "\3\0\1\65\1\0\1\66\1\67\1\51\1\51\1\0\1\2\1\0"+
    "\1\15\1\11\1\14\1\13\1\6\2\41\4\12\1\0\1\70\1\0"+
    "\1\4\1\0\1\45\1\0\1\22\1\53\1\54\1\10\1\57\1\60"+
    "\2\5\1\62\1\16\1\5\1\61\1\5\1\37\1\26\1\63\1\5"+
    "\1\44\1\35\1\55\1\56\2\5\1\46\1\47\1\50\1\1\1\0"+
    "\1\3\1\0\1\5\1\0\1\42\1\31\1\27\1\52\1\32\1\52"+
    "\1\23\4\5\1\20\1\34\1\43\1\30\1\36\1\5\1\33\1\24"+
    "\1\25\1\17\1\40\2\5\1\21\1\5\1\0\1\71\10\0\1\75"+
    "\u1fa2\0\1\75\1\75\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udfe6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\2\1\1\2\1\3\1\1\11\3\1\4\1\5"+
    "\1\6\1\7\1\10\1\11\2\12\3\0\1\13\1\0"+
    "\1\14\1\3\1\15\2\0\2\3\1\16\1\17\1\3"+
    "\6\0\1\3\1\20\7\0\3\3\1\0\1\21\4\0"+
    "\1\22\4\0\1\23\2\3\11\0\1\24\1\25\67\0"+
    "\1\26\17\0\1\26\11\0\1\27\2\0\2\26\16\0"+
    "\3\30\1\26\13\0\1\26\22\0\1\26\16\0\1\26"+
    "\12\0\1\26\7\0\1\26\1\27\5\0\1\26\4\0"+
    "\1\26\3\0\1\26";

  private static int [] zzUnpackAction() {
    int [] result = new int[266];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\76\0\174\0\272\0\370\0\u0136\0\u0174\0\u01b2"+
    "\0\u01f0\0\u022e\0\u026c\0\u02aa\0\u02e8\0\u0326\0\u0364\0\76"+
    "\0\76\0\76\0\76\0\76\0\76\0\u03a2\0\76\0\u03e0"+
    "\0\u041e\0\u0136\0\76\0\u045c\0\u049a\0\u04d8\0\370\0\u0516"+
    "\0\u0554\0\u0592\0\u05d0\0\370\0\370\0\u060e\0\u064c\0\u068a"+
    "\0\u06c8\0\u0706\0\u0744\0\u0782\0\u07c0\0\370\0\u07fe\0\u083c"+
    "\0\u087a\0\u08b8\0\u08f6\0\u0934\0\u0972\0\u09b0\0\u09ee\0\u0a2c"+
    "\0\u0a6a\0\76\0\u0aa8\0\u0ae6\0\u0b24\0\u0b62\0\370\0\u0ba0"+
    "\0\u0bde\0\u0c1c\0\u0c5a\0\370\0\u0c98\0\u0cd6\0\u0d14\0\u0d52"+
    "\0\u0d90\0\u0dce\0\u0e0c\0\u0e4a\0\u0e88\0\u0ec6\0\u0f04\0\370"+
    "\0\370\0\u0f42\0\u0f80\0\u0fbe\0\u0ffc\0\u103a\0\u1078\0\u10b6"+
    "\0\u10f4\0\u1132\0\u1170\0\u11ae\0\u11ec\0\u122a\0\u1268\0\u12a6"+
    "\0\u12e4\0\u1322\0\u1360\0\u139e\0\u13dc\0\u141a\0\u1458\0\u1496"+
    "\0\u14d4\0\u1512\0\u1550\0\u158e\0\u15cc\0\u160a\0\u1648\0\u1686"+
    "\0\u16c4\0\u1702\0\u1740\0\u177e\0\u17bc\0\u17fa\0\u1838\0\u1876"+
    "\0\u18b4\0\u18f2\0\u1930\0\u196e\0\u19ac\0\u19ea\0\u1a28\0\u1a66"+
    "\0\u1aa4\0\u1ae2\0\u1b20\0\u1b5e\0\u1b9c\0\u1bda\0\u1c18\0\u1c56"+
    "\0\u1c94\0\u1cd2\0\u1d10\0\u1d4e\0\u1d8c\0\u1dca\0\u1e08\0\u1e46"+
    "\0\u1e84\0\u1ec2\0\u1f00\0\u1f3e\0\u1f7c\0\u1fba\0\u1ff8\0\u2036"+
    "\0\u2074\0\u20b2\0\u20f0\0\u212e\0\u216c\0\u21aa\0\u21e8\0\u2226"+
    "\0\u2264\0\u22a2\0\u22e0\0\u231e\0\u235c\0\u21e8\0\u239a\0\u23d8"+
    "\0\u2416\0\u2454\0\u2492\0\u24d0\0\u250e\0\u254c\0\u258a\0\u25c8"+
    "\0\u2606\0\u2644\0\u2682\0\u26c0\0\u26fe\0\u273c\0\u1c18\0\u277a"+
    "\0\u27b8\0\u27f6\0\u2834\0\u2872\0\u28b0\0\u28ee\0\u292c\0\u296a"+
    "\0\u29a8\0\u29e6\0\u2a24\0\u2a62\0\u2aa0\0\u2ade\0\u2b1c\0\u2b5a"+
    "\0\u2b98\0\u2bd6\0\u2c14\0\u2c52\0\u2c90\0\u2cce\0\u2d0c\0\u2d4a"+
    "\0\u2d88\0\u2dc6\0\u2e04\0\u2e42\0\u2e80\0\u2ebe\0\u2efc\0\u2f3a"+
    "\0\u2f78\0\u2fb6\0\u2ff4\0\u3032\0\u3070\0\u30ae\0\u30ec\0\u312a"+
    "\0\u3168\0\u31a6\0\u31e4\0\u3222\0\u3260\0\u329e\0\u32dc\0\u331a"+
    "\0\u3358\0\u3396\0\u33d4\0\u3412\0\u3450\0\u348e\0\u34cc\0\u350a"+
    "\0\u3548\0\u3586\0\u35c4\0\u3602\0\u3640\0\u367e\0\u36bc\0\u36fa"+
    "\0\u3738\0\u3776\0\76\0\u37b4\0\u37f2\0\u3830\0\u386e\0\u38ac"+
    "\0\u38ea\0\u3928\0\u3966\0\u39a4\0\u39e2\0\u3a20\0\u3a5e\0\u3a9c"+
    "\0\u3ada\0\u3b18";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[266];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\2\2\1\4\1\5\1\2\1\6\1\7"+
    "\5\2\4\5\1\10\3\5\1\11\10\5\1\12\1\5"+
    "\1\2\2\5\1\13\1\2\3\5\1\2\3\5\1\14"+
    "\2\5\1\15\1\5\1\16\1\17\1\20\1\21\1\22"+
    "\1\23\1\24\1\25\1\26\2\27\100\0\1\30\100\0"+
    "\1\31\76\0\2\5\1\0\5\5\1\0\27\5\1\0"+
    "\3\5\1\0\12\5\12\0\7\32\1\33\66\32\2\0"+
    "\1\34\2\0\2\5\1\0\5\5\1\0\10\5\1\35"+
    "\16\5\1\0\3\5\1\0\12\5\17\0\2\5\1\0"+
    "\5\5\1\0\21\5\1\36\5\5\1\0\3\5\1\0"+
    "\12\5\17\0\2\5\1\0\5\5\1\0\26\5\1\37"+
    "\1\0\3\5\1\0\12\5\14\0\1\40\2\0\2\5"+
    "\1\0\5\5\1\0\27\5\1\0\3\5\1\0\12\5"+
    "\14\0\1\41\2\0\2\5\1\0\5\5\1\0\27\5"+
    "\1\0\3\5\1\0\12\5\17\0\2\5\1\0\5\5"+
    "\1\0\26\5\1\42\1\0\3\5\1\0\12\5\17\0"+
    "\2\5\1\0\5\5\1\0\4\5\1\43\22\5\1\0"+
    "\3\5\1\0\10\5\1\44\1\5\17\0\2\5\1\0"+
    "\5\5\1\0\27\5\1\0\3\5\1\0\6\5\1\45"+
    "\3\5\17\0\2\5\1\0\5\5\1\0\26\5\1\46"+
    "\1\0\3\5\1\0\12\5\105\0\1\27\4\0\1\47"+
    "\77\0\1\50\77\0\1\51\2\0\1\52\1\0\1\53"+
    "\1\54\66\0\2\5\1\0\5\5\1\0\21\5\1\55"+
    "\5\5\1\0\3\5\1\0\12\5\17\0\2\5\1\0"+
    "\1\56\4\5\1\0\27\5\1\0\3\5\1\0\12\5"+
    "\20\0\1\57\1\0\1\60\1\0\3\57\5\0\1\61"+
    "\4\0\1\60\1\0\1\62\1\60\6\0\1\57\1\61"+
    "\7\0\1\60\1\62\1\60\2\0\2\60\63\0\1\63"+
    "\1\64\1\65\32\0\2\5\1\0\5\5\1\0\27\5"+
    "\1\0\3\5\1\0\4\5\1\66\5\5\17\0\2\5"+
    "\1\0\5\5\1\0\27\5\1\0\3\5\1\0\7\5"+
    "\1\67\2\5\17\0\2\5\1\0\5\5\1\0\27\5"+
    "\1\0\3\5\1\0\10\5\1\70\1\5\14\0\1\71"+
    "\77\0\1\72\102\0\1\73\2\0\1\74\67\0\1\75"+
    "\3\0\1\76\2\75\24\0\1\76\42\0\1\73\2\0"+
    "\4\73\24\0\1\73\42\0\1\76\2\0\1\76\1\73"+
    "\2\76\24\0\1\76\41\0\2\5\1\0\5\5\1\0"+
    "\27\5\1\0\3\5\1\0\5\5\1\77\4\5\20\0"+
    "\1\100\1\0\1\100\1\60\3\100\5\0\1\100\4\0"+
    "\1\100\1\0\2\100\6\0\2\100\7\0\3\100\2\0"+
    "\2\100\23\0\1\101\1\0\5\101\5\0\1\101\4\0"+
    "\1\101\1\0\2\101\6\0\2\101\7\0\3\101\2\0"+
    "\2\101\23\0\1\100\1\0\5\100\5\0\1\100\4\0"+
    "\1\100\1\0\2\100\6\0\2\100\7\0\3\100\2\0"+
    "\2\100\23\0\1\102\1\0\1\101\4\102\5\0\1\102"+
    "\4\0\1\102\1\0\1\102\1\101\6\0\2\102\7\0"+
    "\1\101\2\102\2\0\2\101\63\0\1\103\76\0\1\103"+
    "\76\0\1\103\32\0\2\5\1\0\5\5\1\0\27\5"+
    "\1\0\3\5\1\0\5\5\1\104\4\5\17\0\2\5"+
    "\1\0\5\5\1\0\17\5\1\105\7\5\1\0\3\5"+
    "\1\0\12\5\17\0\2\5\1\0\5\5\1\0\21\5"+
    "\1\106\5\5\1\0\3\5\1\0\12\5\12\0\2\71"+
    "\1\107\73\71\15\0\1\110\75\0\1\111\75\0\1\112"+
    "\75\0\1\113\66\0\1\101\1\0\5\101\1\114\4\0"+
    "\1\101\4\0\1\101\1\0\2\101\6\0\2\101\6\0"+
    "\1\114\3\101\2\0\2\101\32\0\1\114\33\0\1\114"+
    "\32\0\1\101\4\0\2\101\1\114\33\0\1\114\72\0"+
    "\1\115\1\116\1\117\32\0\2\5\1\0\5\5\1\0"+
    "\27\5\1\0\3\5\1\0\5\5\1\120\4\5\17\0"+
    "\2\5\1\0\5\5\1\0\27\5\1\0\3\5\1\0"+
    "\3\5\1\121\6\5\12\0\2\71\1\122\73\71\10\0"+
    "\1\123\5\0\1\124\3\0\1\125\3\0\1\126\6\0"+
    "\1\127\1\0\1\130\54\0\1\124\67\0\1\123\5\0"+
    "\1\131\3\0\1\125\3\0\1\126\6\0\1\127\1\0"+
    "\1\130\46\0\1\123\5\0\1\132\3\0\1\125\3\0"+
    "\1\126\6\0\1\127\1\0\1\130\44\0\1\133\1\0"+
    "\1\134\1\0\3\133\5\0\1\135\4\0\1\134\1\0"+
    "\1\136\1\134\6\0\1\133\1\135\7\0\1\134\1\136"+
    "\1\134\2\0\2\134\63\0\1\137\76\0\1\137\76\0"+
    "\1\137\25\0\2\71\1\122\1\140\72\71\32\0\1\141"+
    "\62\0\1\142\75\0\1\143\105\0\1\144\100\0\1\145"+
    "\73\0\1\146\107\0\1\147\52\0\1\142\22\0\1\147"+
    "\41\0\1\150\1\0\1\150\1\134\3\150\5\0\1\150"+
    "\4\0\1\150\1\0\2\150\6\0\2\150\7\0\3\150"+
    "\2\0\2\150\23\0\1\151\1\0\5\151\5\0\1\151"+
    "\4\0\1\151\1\0\2\151\6\0\2\151\7\0\3\151"+
    "\2\0\2\151\23\0\1\150\1\0\5\150\5\0\1\150"+
    "\4\0\1\150\1\0\2\150\6\0\2\150\7\0\3\150"+
    "\2\0\2\150\23\0\1\152\1\0\1\151\4\152\5\0"+
    "\1\152\4\0\1\152\1\0\1\152\1\151\6\0\2\152"+
    "\7\0\1\151\2\152\2\0\2\151\63\0\1\153\1\154"+
    "\1\155\25\0\2\71\1\107\1\27\72\71\27\0\1\156"+
    "\66\0\1\157\100\0\1\160\77\0\1\161\106\0\1\162"+
    "\77\0\1\156\100\0\1\163\40\0\1\151\1\0\5\151"+
    "\1\164\4\0\1\151\4\0\1\151\1\0\2\151\6\0"+
    "\2\151\6\0\1\164\3\151\2\0\2\151\32\0\1\164"+
    "\33\0\1\164\32\0\1\151\4\0\2\151\1\164\33\0"+
    "\1\164\72\0\1\165\76\0\1\165\76\0\1\165\57\0"+
    "\1\166\64\0\1\167\73\0\1\170\106\0\1\171\72\0"+
    "\1\156\67\0\1\172\64\0\1\173\1\0\1\174\1\0"+
    "\3\173\5\0\1\175\4\0\1\174\1\0\1\176\1\174"+
    "\6\0\1\173\1\175\7\0\1\174\1\176\1\174\2\0"+
    "\2\174\63\0\1\177\1\200\1\201\61\0\1\171\56\0"+
    "\1\202\104\0\1\203\102\0\1\204\106\0\1\205\41\0"+
    "\1\206\1\0\1\206\1\174\3\206\5\0\1\206\4\0"+
    "\1\206\1\0\2\206\6\0\2\206\7\0\3\206\2\0"+
    "\2\206\23\0\1\207\1\0\5\207\5\0\1\207\4\0"+
    "\1\207\1\0\2\207\6\0\2\207\7\0\3\207\2\0"+
    "\2\207\23\0\1\206\1\0\5\206\5\0\1\206\4\0"+
    "\1\206\1\0\2\206\6\0\2\206\7\0\3\206\2\0"+
    "\2\206\23\0\1\210\1\0\1\207\4\210\5\0\1\210"+
    "\4\0\1\210\1\0\1\210\1\207\6\0\2\210\7\0"+
    "\1\207\2\210\2\0\2\207\63\0\1\211\76\0\1\211"+
    "\76\0\1\211\40\0\1\212\107\0\1\167\102\0\1\213"+
    "\76\0\1\214\50\0\1\207\1\0\5\207\1\215\4\0"+
    "\1\207\4\0\1\207\1\0\2\207\6\0\2\207\6\0"+
    "\1\215\3\207\2\0\2\207\32\0\1\215\33\0\1\215"+
    "\32\0\1\207\4\0\2\207\1\215\33\0\1\215\71\0"+
    "\1\216\1\217\1\220\1\221\36\0\1\222\117\0\1\167"+
    "\63\0\1\223\62\0\1\224\1\0\1\225\1\0\3\224"+
    "\5\0\1\226\4\0\1\225\1\0\1\227\1\225\6\0"+
    "\1\224\1\226\7\0\1\225\1\227\1\225\2\0\2\225"+
    "\62\0\1\230\76\0\1\231\76\0\1\231\76\0\1\231"+
    "\40\0\1\232\77\0\1\233\66\0\1\234\1\0\1\234"+
    "\1\225\3\234\5\0\1\234\4\0\1\234\1\0\2\234"+
    "\6\0\2\234\7\0\3\234\2\0\2\234\23\0\1\235"+
    "\1\0\5\235\5\0\1\235\4\0\1\235\1\0\2\235"+
    "\6\0\2\235\7\0\3\235\2\0\2\235\23\0\1\234"+
    "\1\0\5\234\5\0\1\234\4\0\1\234\1\0\2\234"+
    "\6\0\2\234\7\0\3\234\2\0\2\234\23\0\1\236"+
    "\1\0\1\235\4\236\5\0\1\236\4\0\1\236\1\0"+
    "\1\236\1\235\6\0\2\236\7\0\1\235\2\236\2\0"+
    "\2\235\62\0\1\237\75\0\1\216\1\240\1\241\1\242"+
    "\40\0\1\243\75\0\1\244\70\0\1\235\1\0\5\235"+
    "\1\245\4\0\1\235\4\0\1\235\1\0\2\235\6\0"+
    "\2\235\6\0\1\245\3\235\2\0\2\235\32\0\1\245"+
    "\33\0\1\245\32\0\1\235\4\0\2\235\1\245\33\0"+
    "\1\245\71\0\1\246\76\0\1\247\76\0\1\247\76\0"+
    "\1\247\27\0\1\250\104\0\1\251\72\0\1\252\1\0"+
    "\1\253\1\0\3\252\5\0\1\254\4\0\1\253\1\0"+
    "\1\255\1\253\6\0\1\252\1\254\7\0\1\253\1\255"+
    "\1\253\2\0\2\253\62\0\1\216\1\256\1\257\1\260"+
    "\33\0\1\261\2\0\1\262\1\0\1\263\1\264\74\0"+
    "\1\265\70\0\1\266\1\0\1\266\1\253\3\266\5\0"+
    "\1\266\4\0\1\266\1\0\2\266\6\0\2\266\7\0"+
    "\3\266\2\0\2\266\23\0\1\267\1\0\5\267\5\0"+
    "\1\267\4\0\1\267\1\0\2\267\6\0\2\267\7\0"+
    "\3\267\2\0\2\267\23\0\1\266\1\0\5\266\5\0"+
    "\1\266\4\0\1\266\1\0\2\266\6\0\2\266\7\0"+
    "\3\266\2\0\2\266\23\0\1\270\1\0\1\267\4\270"+
    "\5\0\1\270\4\0\1\270\1\0\1\270\1\267\6\0"+
    "\2\270\7\0\1\267\2\270\2\0\2\267\63\0\1\271"+
    "\76\0\1\271\76\0\1\271\36\0\1\272\2\0\1\273"+
    "\67\0\1\274\3\0\1\275\2\274\24\0\1\275\42\0"+
    "\1\272\2\0\4\272\24\0\1\272\42\0\1\275\2\0"+
    "\1\275\1\272\2\275\24\0\1\275\42\0\1\243\75\0"+
    "\1\267\1\0\5\267\1\215\4\0\1\267\4\0\1\267"+
    "\1\0\2\267\6\0\2\267\6\0\1\215\3\267\2\0"+
    "\2\267\23\0\1\267\4\0\2\267\1\215\33\0\1\215"+
    "\71\0\1\216\1\276\1\277\1\300\42\0\1\301\75\0"+
    "\1\302\75\0\1\303\75\0\1\304\126\0\1\305\76\0"+
    "\1\305\76\0\1\305\35\0\1\306\5\0\1\307\3\0"+
    "\1\310\3\0\1\311\6\0\1\312\1\0\1\313\54\0"+
    "\1\307\67\0\1\306\5\0\1\314\3\0\1\310\3\0"+
    "\1\311\6\0\1\312\1\0\1\313\46\0\1\306\5\0"+
    "\1\315\3\0\1\310\3\0\1\311\6\0\1\312\1\0"+
    "\1\313\103\0\1\216\1\316\1\317\1\320\57\0\1\321"+
    "\62\0\1\322\75\0\1\323\105\0\1\324\100\0\1\325"+
    "\73\0\1\326\107\0\1\327\52\0\1\322\22\0\1\327"+
    "\101\0\1\330\76\0\1\330\76\0\1\330\54\0\1\331"+
    "\66\0\1\332\100\0\1\333\77\0\1\334\106\0\1\335"+
    "\77\0\1\331\100\0\1\336\77\0\1\216\1\337\1\340"+
    "\1\341\57\0\1\342\64\0\1\343\73\0\1\344\106\0"+
    "\1\345\72\0\1\331\67\0\1\346\124\0\1\347\76\0"+
    "\1\347\76\0\1\347\61\0\1\345\56\0\1\350\104\0"+
    "\1\351\102\0\1\352\106\0\1\353\100\0\1\216\1\354"+
    "\1\355\1\356\40\0\1\357\107\0\1\343\102\0\1\360"+
    "\76\0\1\361\110\0\1\362\76\0\1\362\76\0\1\362"+
    "\36\0\1\363\117\0\1\343\63\0\1\364\121\0\1\216"+
    "\1\365\1\366\1\367\40\0\1\370\77\0\1\371\126\0"+
    "\1\372\76\0\1\372\76\0\1\372\40\0\1\373\75\0"+
    "\1\374\127\0\1\216\1\375\1\376\1\377\36\0\1\u0100"+
    "\132\0\1\u0101\76\0\1\u0101\76\0\1\u0101\40\0\1\u0102"+
    "\127\0\1\216\1\u0103\1\u0104\1\u0105\33\0\1\373\135\0"+
    "\1\u0106\76\0\1\u0106\76\0\1\u0106\72\0\1\216\1\u0107"+
    "\1\u0108\1\u0109\73\0\1\u010a\76\0\1\u010a\76\0\1\u010a"+
    "\72\0\1\216\30\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[15190];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\15\1\6\11\1\1\1\11\3\0\1\11"+
    "\1\0\3\1\2\0\5\1\6\0\2\1\7\0\3\1"+
    "\1\0\1\11\4\0\1\1\4\0\3\1\11\0\2\1"+
    "\67\0\1\1\17\0\1\1\11\0\1\1\2\0\2\1"+
    "\16\0\4\1\13\0\1\1\22\0\1\1\16\0\1\1"+
    "\12\0\1\1\7\0\1\1\1\11\5\0\1\1\4\0"+
    "\1\1\3\0\1\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[266];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
    private Symbol sym(int type){
        return new Symbol(type, yyline, yycolumn);
    }

    private Symbol sym(int type, Object value){
        return new Symbol(type, yyline, yycolumn, value);
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Yylex(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 220) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { System.out.println("Scanner Error: " + yytext());
            }
          case 25: break;
          case 2: 
            { return sym(sym.EQ);
            }
          case 26: break;
          case 3: 
            { return sym(sym.VAR, yytext());
            }
          case 27: break;
          case 4: 
            { return sym(sym.NOT, new String(yytext()));
            }
          case 28: break;
          case 5: 
            { return sym(sym.AND, new String(yytext()));
            }
          case 29: break;
          case 6: 
            { return sym(sym.OP);
            }
          case 30: break;
          case 7: 
            { return sym(sym.CP);
            }
          case 31: break;
          case 8: 
            { return sym(sym.SCOLON);
            }
          case 32: break;
          case 9: 
            { return sym(sym.OR, new String(yytext()));
            }
          case 33: break;
          case 10: 
            { ;
            }
          case 34: break;
          case 11: 
            { return sym(sym.QSTRING, new String(yytext()));
            }
          case 35: break;
          case 12: 
            { return sym(sym.DO_WD, new String(yytext()));
            }
          case 36: break;
          case 13: 
            { return sym(sym.OR_WD, new String(yytext()));
            }
          case 37: break;
          case 14: 
            { return sym(sym.FI_WD, new String(yytext()));
            }
          case 38: break;
          case 15: 
            { return sym(sym.IF_WD, new String(yytext()));
            }
          case 39: break;
          case 16: 
            { return sym(sym.AND_WD, new String(yytext()));
            }
          case 40: break;
          case 17: 
            { return sym(sym.SEP);
            }
          case 41: break;
          case 18: 
            { return sym(sym.DONE_WD, new String(yytext()));
            }
          case 42: break;
          case 19: 
            { return sym(sym.TURE_WD, new String(yytext()));
            }
          case 43: break;
          case 20: 
            { return sym(sym.FALSE_WD, new String(yytext()));
            }
          case 44: break;
          case 21: 
            { return sym(sym.PRINT_WD, new String(yytext()));
            }
          case 45: break;
          case 22: 
            { return sym(sym.TOK2);
            }
          case 46: break;
          case 23: 
            { return sym(sym.TOK1);
            }
          case 47: break;
          case 24: 
            { return sym(sym.TOK3);
            }
          case 48: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
