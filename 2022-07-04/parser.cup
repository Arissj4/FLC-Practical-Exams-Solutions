import java_cup.runtime.*;
import java.util.*;
import java.io.*;


init with{:
    table = new HashMap <String, Boolean>();
:};

parser code {:
    public HashMap <String, Boolean> table;

    public Object stack(int position){
        return (((Symbol)stack.elementAt(tos + position)).value);
    }
:};


/////////////////////////////
//// Symbols Delaration
////////////////////////////

terminal  SEP,TOK1, SCOLON, TOK2, TOK3, VAR, EQ, OP, CP;
 terminal String AND, OR, NOT, TURE_WD, FALSE_WD, IF_WD, FI_WD, OR_WD, AND_WD, DO_WD, DONE_WD, PRINT_WD, QSTRING;
// terminal Double test;
// terminal Integer test;

non terminal prog, header, header1, header2, header3, execution_section, command, ass, if, operators, list_comp, comp ;

non terminal Boolean operands, bool_exp, nt0, nt1;

non terminal String print;
// non terminal HashMap ;
// non terminal Integer ;
// non terminal Double ;


/////////////////////////////
//// Grammar
////////////////////////////

start with prog;

prog ::= header SEP execution_section
;

header ::= header1 header2 header2 | header1 header2 header2 header2 | header1 header2 header2 header2 header2 header2 header2 header2 header2 header2 | 
TOK3 SCOLON header3 TOK3 SCOLON header3 TOK3 SCOLON header3
;

header1 ::= TOK2 SCOLON TOK2 SCOLON TOK2 SCOLON | header1 TOK2 SCOLON TOK2 SCOLON
;

header2 ::= TOK1 SCOLON | TOK3 SCOLON 
;

header3 ::= header3 TOK1 SCOLON | header3 TOK2 SCOLON | 
;

execution_section ::= command command command command command | execution_section command command
;

command ::= ass | if
;

ass ::= VAR:name EQ bool_exp:bool SCOLON {:
                                            parser.table.put((String)name, (Boolean)bool);
                                        :}
;

bool_exp ::= operands:a {: RESULT = (Boolean)a; :}
| VAR:name {: RESULT = (Boolean)parser.table.get(name); :}
| operators VAR:a {:
                        Boolean b = (Boolean)parser.table.get(a);
                        RESULT = !b;
                    :}
| operators operands:a {:
                        RESULT = !(Boolean)a;
                    :}
| bool_exp:eop operators:opt VAR:op1 {:
                                            Boolean b = (Boolean)parser.table.get(op1);
                                            if(opt == "&&"){
                                                RESULT = (Boolean)eop && b;
                                            }
                                            if(opt == "||"){
                                                RESULT = (Boolean)eop || b;
                                            }
                                            :}
| bool_exp:eop operators:opt operands:op1 {:
                                            if(opt == "&&"){
                                                RESULT = (Boolean)eop && (Boolean)op1;
                                            }
                                            if(opt == "||"){
                                                RESULT = (Boolean)eop || (Boolean)op1;
                                            }
                                            :}
| bool_exp:eop operators:opt OP bool_exp:eop2 CP {:
                                                if(opt == "&&"){
                                                RESULT = (Boolean)eop && (Boolean)eop2;
                                                }
                                                if(opt == "||"){
                                                    RESULT = (Boolean)eop || (Boolean)eop2;
                                                } 
                                            :}
;

operands ::= TURE_WD {: RESULT = true; :} | FALSE_WD {: RESULT = false; :}
;

operators ::= AND {: RESULT = "&&"; :} | OR {: RESULT = "||"; :} | NOT {: RESULT = "!"; :}
;

if ::= IF_WD bool_exp:ex list_comp FI_WD {: RESULT = (Boolean)ex; :}
;

list_comp ::= nt0 comp | list_comp nt1 comp 
;

nt0 ::= {: RESULT = (Boolean)parser.stack(0); :}
;

nt1 ::= {: RESULT = (Boolean)parser.stack(-1); :}
;

comp ::= OR_WD bool_exp:exp DO_WD print:pr DONE_WD {:
                                                        Boolean a = (Boolean)parser.stack(-5);
                                                        if(a || (Boolean)exp){
                                                            System.out.println(pr);
                                                        }
                                                    :}
| AND_WD bool_exp:exp DO_WD print:pr DONE_WD {:
                                                Boolean a = (Boolean)parser.stack(-5);
                                                if(a && (Boolean)exp){
                                                    System.out.println(pr);
                                                }
                                            :}
;

print ::= PRINT_WD QSTRING:qs SCOLON {: RESULT = (String)qs; :}
;