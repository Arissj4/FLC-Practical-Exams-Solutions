
//----------------------------------------------------
// The following code was generated by CUP v0.11b beta 20140226
//----------------------------------------------------

import java_cup.runtime.*;
import java.util.*;
import java.io.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b beta 20140226 generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\046\000\002\002\004\000\002\002\005\000\002\003" +
    "\005\000\002\003\006\000\002\003\014\000\002\003\013" +
    "\000\002\004\010\000\002\004\007\000\002\005\004\000" +
    "\002\005\004\000\002\006\005\000\002\006\005\000\002" +
    "\006\002\000\002\007\007\000\002\007\005\000\002\010" +
    "\003\000\002\010\003\000\002\011\006\000\002\017\003" +
    "\000\002\017\003\000\002\017\004\000\002\017\004\000" +
    "\002\017\005\000\002\017\005\000\002\017\007\000\002" +
    "\016\003\000\002\016\003\000\002\013\003\000\002\013" +
    "\003\000\002\013\003\000\002\012\006\000\002\014\004" +
    "\000\002\014\005\000\002\020\002\000\002\021\002\000" +
    "\002\015\007\000\002\015\007\000\002\022\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\135\000\006\007\005\010\004\001\002\000\004\006" +
    "\124\001\002\000\004\006\117\001\002\000\004\002\116" +
    "\001\002\000\010\005\077\007\076\010\075\001\002\000" +
    "\004\004\011\001\002\000\006\011\012\022\016\001\002" +
    "\000\004\012\072\001\002\000\010\002\ufff2\011\ufff2\022" +
    "\ufff2\001\002\000\010\002\000\011\012\022\016\001\002" +
    "\000\010\002\ufff1\011\ufff1\022\ufff1\001\002\000\016\011" +
    "\027\015\024\016\034\017\033\020\032\021\025\001\002" +
    "\000\006\011\012\022\016\001\002\000\006\011\012\022" +
    "\016\001\002\000\006\011\012\022\016\001\002\000\006" +
    "\011\012\022\016\001\002\000\010\002\ufff4\011\ufff4\022" +
    "\ufff4\001\002\000\012\011\uffe6\013\uffe6\020\uffe6\021\uffe6" +
    "\001\002\000\022\006\uffe7\014\uffe7\015\uffe7\016\uffe7\017" +
    "\uffe7\024\uffe7\025\uffe7\026\uffe7\001\002\000\010\011\066" +
    "\020\032\021\025\001\002\000\022\006\uffee\014\uffee\015" +
    "\uffee\016\uffee\017\uffee\024\uffee\025\uffee\026\uffee\001\002" +
    "\000\022\006\uffef\014\uffef\015\uffef\016\uffef\017\uffef\024" +
    "\uffef\025\uffef\026\uffef\001\002\000\014\015\024\016\034" +
    "\017\033\024\uffe0\025\uffe0\001\002\000\022\006\uffe8\014" +
    "\uffe8\015\uffe8\016\uffe8\017\uffe8\024\uffe8\025\uffe8\026\uffe8" +
    "\001\002\000\012\011\uffe4\013\uffe4\020\uffe4\021\uffe4\001" +
    "\002\000\012\011\uffe5\013\uffe5\020\uffe5\021\uffe5\001\002" +
    "\000\012\011\061\013\062\020\032\021\025\001\002\000" +
    "\006\024\044\025\042\001\002\000\010\023\040\024\uffdf" +
    "\025\uffdf\001\002\000\010\002\uffe3\011\uffe3\022\uffe3\001" +
    "\002\000\006\024\044\025\042\001\002\000\016\011\027" +
    "\015\024\016\034\017\033\020\032\021\025\001\002\000" +
    "\010\023\uffe1\024\uffe1\025\uffe1\001\002\000\016\011\027" +
    "\015\024\016\034\017\033\020\032\021\025\001\002\000" +
    "\012\015\024\016\034\017\033\026\046\001\002\000\004" +
    "\030\050\001\002\000\004\027\053\001\002\000\004\031" +
    "\051\001\002\000\004\006\052\001\002\000\004\027\uffdc" +
    "\001\002\000\010\023\uffde\024\uffde\025\uffde\001\002\000" +
    "\012\015\024\016\034\017\033\026\055\001\002\000\004" +
    "\030\050\001\002\000\004\027\057\001\002\000\010\023" +
    "\uffdd\024\uffdd\025\uffdd\001\002\000\010\023\uffe2\024\uffe2" +
    "\025\uffe2\001\002\000\022\006\uffeb\014\uffeb\015\uffeb\016" +
    "\uffeb\017\uffeb\024\uffeb\025\uffeb\026\uffeb\001\002\000\016" +
    "\011\027\015\024\016\034\017\033\020\032\021\025\001" +
    "\002\000\022\006\uffea\014\uffea\015\uffea\016\uffea\017\uffea" +
    "\024\uffea\025\uffea\026\uffea\001\002\000\012\014\065\015" +
    "\024\016\034\017\033\001\002\000\022\006\uffe9\014\uffe9" +
    "\015\uffe9\016\uffe9\017\uffe9\024\uffe9\025\uffe9\026\uffe9\001" +
    "\002\000\022\006\uffed\014\uffed\015\uffed\016\uffed\017\uffed" +
    "\024\uffed\025\uffed\026\uffed\001\002\000\022\006\uffec\014" +
    "\uffec\015\uffec\016\uffec\017\uffec\024\uffec\025\uffec\026\uffec" +
    "\001\002\000\006\011\012\022\016\001\002\000\010\002" +
    "\ufff3\011\ufff3\022\ufff3\001\002\000\016\011\027\015\024" +
    "\016\034\017\033\020\032\021\025\001\002\000\012\006" +
    "\074\015\024\016\034\017\033\001\002\000\010\002\ufff0" +
    "\011\ufff0\022\ufff0\001\002\000\004\006\115\001\002\000" +
    "\004\006\112\001\002\000\004\006\111\001\002\000\006" +
    "\005\077\010\075\001\002\000\010\004\uffff\005\077\010" +
    "\075\001\002\000\010\004\ufffe\005\077\010\075\001\002" +
    "\000\006\005\077\010\075\001\002\000\006\005\077\010" +
    "\075\001\002\000\006\005\077\010\075\001\002\000\006" +
    "\005\077\010\075\001\002\000\006\005\077\010\075\001" +
    "\002\000\004\004\ufffd\001\002\000\010\004\ufff9\005\ufff9" +
    "\010\ufff9\001\002\000\004\007\113\001\002\000\004\006" +
    "\114\001\002\000\010\005\ufffa\007\ufffa\010\ufffa\001\002" +
    "\000\010\004\ufff8\005\ufff8\010\ufff8\001\002\000\004\002" +
    "\001\001\002\000\004\007\120\001\002\000\004\006\121" +
    "\001\002\000\004\007\122\001\002\000\004\006\123\001" +
    "\002\000\010\005\ufffb\007\ufffb\010\ufffb\001\002\000\010" +
    "\005\ufff5\007\ufff5\010\ufff5\001\002\000\010\005\130\007" +
    "\127\010\126\001\002\000\004\006\133\001\002\000\004" +
    "\006\132\001\002\000\004\006\131\001\002\000\012\004" +
    "\ufff7\005\ufff7\007\ufff7\010\ufff7\001\002\000\012\004\ufff6" +
    "\005\ufff6\007\ufff6\010\ufff6\001\002\000\010\005\ufff5\007" +
    "\ufff5\010\ufff5\001\002\000\010\005\130\007\127\010\135" +
    "\001\002\000\004\006\136\001\002\000\010\004\ufff5\005" +
    "\ufff5\007\ufff5\001\002\000\010\004\ufffc\005\130\007\127" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\135\000\010\002\005\003\007\004\006\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\005\077\001\001\000\002\001\001\000\012\007\013\010" +
    "\016\011\012\012\014\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\010\067\011\012\012\014\001\001\000" +
    "\002\001\001\000\010\013\025\016\027\017\030\001\001" +
    "\000\010\010\017\011\012\012\014\001\001\000\010\010" +
    "\020\011\012\012\014\001\001\000\010\010\021\011\012" +
    "\012\014\001\001\000\010\010\022\011\012\012\014\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\016\066\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\013\034\014\036\020\035\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\016" +
    "\062\001\001\000\004\015\057\001\001\000\004\021\040" +
    "\001\001\000\002\001\001\000\004\015\042\001\001\000" +
    "\010\013\025\016\027\017\053\001\001\000\002\001\001" +
    "\000\010\013\025\016\027\017\044\001\001\000\004\013" +
    "\034\001\001\000\004\022\046\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\013\034\001\001\000\004\022\055" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\013\025\016\027\017\063" +
    "\001\001\000\002\001\001\000\004\013\034\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\010\070\011\012\012\014\001\001\000\002\001\001\000" +
    "\010\013\025\016\027\017\072\001\001\000\004\013\034" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\005\100\001\001\000\004" +
    "\005\101\001\001\000\004\005\102\001\001\000\004\005" +
    "\103\001\001\000\004\005\104\001\001\000\004\005\105" +
    "\001\001\000\004\005\106\001\001\000\004\005\107\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\006" +
    "\124\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\006\133\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\006\136\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {

    table = new HashMap <String, Boolean>();

 Tree = new DisegnaAlbero();   }public static DisegnaAlbero Tree;

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 Symbol s=_scanner.next_token(); Tree.push(s.toString(), 0); return s;   }


    public HashMap <String, Boolean> table;

    public Object stack(int position){
        return (((Symbol)stack.elementAt(tos + position)).value);
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= prog EOF 
            { 
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // prog ::= header SEP execution_section 
            { parser.Tree.reduce(3,"prog",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("prog",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // header ::= header1 header2 header2 
            { parser.Tree.reduce(3,"header",1);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("header",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // header ::= header1 header2 header2 header2 
            { parser.Tree.reduce(4,"header",1);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("header",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // header ::= header1 header2 header2 header2 header2 header2 header2 header2 header2 header2 
            { parser.Tree.reduce(10,"header",1);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("header",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // header ::= TOK3 SCOLON header3 TOK3 SCOLON header3 TOK3 SCOLON header3 
            { parser.Tree.reduce(9,"header",1);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("header",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // header1 ::= TOK2 SCOLON TOK2 SCOLON TOK2 SCOLON 
            { parser.Tree.reduce(6,"header1",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("header1",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // header1 ::= header1 TOK2 SCOLON TOK2 SCOLON 
            { parser.Tree.reduce(5,"header1",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("header1",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // header2 ::= TOK1 SCOLON 
            { parser.Tree.reduce(2,"header2",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("header2",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // header2 ::= TOK3 SCOLON 
            { parser.Tree.reduce(2,"header2",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("header2",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // header3 ::= header3 TOK1 SCOLON 
            { parser.Tree.reduce(3,"header3",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("header3",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // header3 ::= header3 TOK2 SCOLON 
            { parser.Tree.reduce(3,"header3",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("header3",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // header3 ::= 
            { parser.Tree.reduce(0,"header3",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("header3",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // execution_section ::= command command command command command 
            { parser.Tree.reduce(5,"execution_section",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("execution_section",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // execution_section ::= execution_section command command 
            { parser.Tree.reduce(3,"execution_section",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("execution_section",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // command ::= ass 
            { parser.Tree.reduce(1,"command",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("command",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // command ::= if 
            { parser.Tree.reduce(1,"command",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("command",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // ass ::= VAR EQ bool_exp SCOLON 
            { parser.Tree.reduce(4,"ass",0);
              Object RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object name = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int boolleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int boolright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Boolean bool = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                                            parser.table.put((String)name, (Boolean)bool);
                                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ass",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // bool_exp ::= operands 
            { parser.Tree.reduce(1,"bool_exp",0);
              Boolean RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Boolean a = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = (Boolean)a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bool_exp",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // bool_exp ::= VAR 
            { parser.Tree.reduce(1,"bool_exp",0);
              Boolean RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object name = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = (Boolean)parser.table.get(name); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bool_exp",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // bool_exp ::= operators VAR 
            { parser.Tree.reduce(2,"bool_exp",0);
              Boolean RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        Boolean b = (Boolean)parser.table.get(a);
                        RESULT = !b;
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bool_exp",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // bool_exp ::= operators operands 
            { parser.Tree.reduce(2,"bool_exp",0);
              Boolean RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Boolean a = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        RESULT = !(Boolean)a;
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bool_exp",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // bool_exp ::= bool_exp operators VAR 
            { parser.Tree.reduce(3,"bool_exp",0);
              Boolean RESULT =null;
		int eopleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eopright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Boolean eop = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int optleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int optright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object opt = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int op1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object op1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                            Boolean b = (Boolean)parser.table.get(op1);
                                            if(opt == "&&"){
                                                RESULT = (Boolean)eop && b;
                                            }
                                            if(opt == "||"){
                                                RESULT = (Boolean)eop || b;
                                            }
                                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bool_exp",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // bool_exp ::= bool_exp operators operands 
            { parser.Tree.reduce(3,"bool_exp",0);
              Boolean RESULT =null;
		int eopleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eopright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Boolean eop = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int optleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int optright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object opt = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int op1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Boolean op1 = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                            if(opt == "&&"){
                                                RESULT = (Boolean)eop && (Boolean)op1;
                                            }
                                            if(opt == "||"){
                                                RESULT = (Boolean)eop || (Boolean)op1;
                                            }
                                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bool_exp",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // bool_exp ::= bool_exp operators OP bool_exp CP 
            { parser.Tree.reduce(5,"bool_exp",0);
              Boolean RESULT =null;
		int eopleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int eopright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Boolean eop = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int optleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int optright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object opt = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eop2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eop2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Boolean eop2 = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                                                if(opt == "&&"){
                                                RESULT = (Boolean)eop && (Boolean)eop2;
                                                }
                                                if(opt == "||"){
                                                    RESULT = (Boolean)eop || (Boolean)eop2;
                                                } 
                                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bool_exp",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // operands ::= TURE_WD 
            { parser.Tree.reduce(1,"operands",0);
              Boolean RESULT =null;
		 RESULT = true; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operands",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // operands ::= FALSE_WD 
            { parser.Tree.reduce(1,"operands",0);
              Boolean RESULT =null;
		 RESULT = false; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operands",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // operators ::= AND 
            { parser.Tree.reduce(1,"operators",0);
              Object RESULT =null;
		 RESULT = "&&"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operators",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // operators ::= OR 
            { parser.Tree.reduce(1,"operators",0);
              Object RESULT =null;
		 RESULT = "||"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operators",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // operators ::= NOT 
            { parser.Tree.reduce(1,"operators",0);
              Object RESULT =null;
		 RESULT = "!"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operators",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // if ::= IF_WD bool_exp list_comp FI_WD 
            { parser.Tree.reduce(4,"if",0);
              Object RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Boolean ex = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = (Boolean)ex; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("if",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // list_comp ::= nt0 comp 
            { parser.Tree.reduce(2,"list_comp",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("list_comp",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // list_comp ::= list_comp nt1 comp 
            { parser.Tree.reduce(3,"list_comp",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("list_comp",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // nt0 ::= 
            { parser.Tree.reduce(0,"nt0",0);
              Boolean RESULT =null;
		 RESULT = (Boolean)parser.stack(0); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("nt0",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // nt1 ::= 
            { parser.Tree.reduce(0,"nt1",0);
              Boolean RESULT =null;
		 RESULT = (Boolean)parser.stack(-1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("nt1",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // comp ::= OR_WD bool_exp DO_WD print DONE_WD 
            { parser.Tree.reduce(5,"comp",0);
              Object RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Boolean exp = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int prleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int prright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String pr = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                                                        Boolean a = (Boolean)parser.stack(-5);
                                                        if(a || (Boolean)exp){
                                                            System.out.println(pr);
                                                        }
                                                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("comp",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // comp ::= AND_WD bool_exp DO_WD print DONE_WD 
            { parser.Tree.reduce(5,"comp",0);
              Object RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Boolean exp = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int prleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int prright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String pr = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                                                Boolean a = (Boolean)parser.stack(-5);
                                                if(a && (Boolean)exp){
                                                    System.out.println(pr);
                                                }
                                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("comp",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // print ::= PRINT_WD QSTRING SCOLON 
            { parser.Tree.reduce(3,"print",0);
              String RESULT =null;
		int qsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int qsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String qs = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = (String)qs; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("print",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
