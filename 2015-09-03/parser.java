
//----------------------------------------------------
// The following code was generated by CUP v0.11b beta 20140226
//----------------------------------------------------

import java_cup.runtime.*;
import java.util.*;
import java.io.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b beta 20140226 generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\042\000\002\002\004\000\002\002\007\000\002\003" +
    "\011\000\002\003\011\000\002\004\003\000\002\005\005" +
    "\000\002\005\002\000\002\006\004\000\002\006\005\000" +
    "\002\007\006\000\002\011\006\000\002\011\010\000\002" +
    "\014\003\000\002\015\003\000\002\024\003\000\002\010" +
    "\004\000\002\010\002\000\002\022\012\000\002\023\003" +
    "\000\002\023\005\000\002\013\003\000\002\013\004\000" +
    "\002\012\006\000\002\030\004\000\002\030\006\000\002" +
    "\020\002\000\002\021\002\000\002\031\005\000\002\027" +
    "\004\000\002\026\006\000\002\026\010\000\002\016\002" +
    "\000\002\017\002\000\002\025\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\123\000\010\005\ufffb\006\ufffb\007\ufffb\001\002\000" +
    "\004\002\125\001\002\000\012\004\ufffd\005\123\006\ufffd" +
    "\007\ufffd\001\002\000\006\006\110\007\107\001\002\000" +
    "\004\004\010\001\002\000\004\021\013\001\002\000\004" +
    "\011\072\001\002\000\006\004\016\021\013\001\002\000" +
    "\010\011\ufff5\016\ufff5\024\ufff5\001\002\000\004\021\013" +
    "\001\002\000\006\004\ufffa\021\ufffa\001\002\000\006\002" +
    "\ufff1\023\021\001\002\000\004\021\013\001\002\000\006" +
    "\004\ufff9\021\ufff9\001\002\000\004\015\060\001\002\000" +
    "\004\021\013\001\002\000\004\002\000\001\002\000\006" +
    "\002\ufff2\021\013\001\002\000\004\024\027\001\002\000" +
    "\006\002\uffed\021\uffed\001\002\000\004\025\uffe8\001\002" +
    "\000\004\025\036\001\002\000\006\010\032\017\033\001" +
    "\002\000\006\002\uffeb\021\uffeb\001\002\000\004\025\uffe7" +
    "\001\002\000\004\025\036\001\002\000\006\010\uffe9\017" +
    "\uffe9\001\002\000\004\027\055\001\002\000\004\020\040" +
    "\001\002\000\004\021\uffe2\001\002\000\010\010\uffe6\013" +
    "\050\017\uffe6\001\002\000\004\021\044\001\002\000\004" +
    "\027\045\001\002\000\012\013\ufff4\014\ufff4\016\ufff4\027" +
    "\ufff4\001\002\000\004\026\uffe0\001\002\000\004\026\047" +
    "\001\002\000\010\010\uffe4\013\uffe4\017\uffe4\001\002\000" +
    "\004\021\uffe1\001\002\000\004\021\044\001\002\000\004" +
    "\027\045\001\002\000\004\026\054\001\002\000\010\010" +
    "\uffe3\013\uffe3\017\uffe3\001\002\000\004\020\uffe5\001\002" +
    "\000\006\010\uffea\017\uffea\001\002\000\006\002\uffec\021" +
    "\uffec\001\002\000\004\021\013\001\002\000\004\016\062" +
    "\001\002\000\004\015\063\001\002\000\004\021\044\001" +
    "\002\000\006\013\uffef\016\uffef\001\002\000\006\013\066" +
    "\016\067\001\002\000\004\021\044\001\002\000\004\010" +
    "\070\001\002\000\004\021\ufff0\001\002\000\006\013\uffee" +
    "\016\uffee\001\002\000\004\021\044\001\002\000\004\014" +
    "\104\001\002\000\006\012\076\013\075\001\002\000\004" +
    "\021\044\001\002\000\006\004\ufff8\021\ufff8\001\002\000" +
    "\004\014\100\001\002\000\004\027\101\001\002\000\004" +
    "\022\ufff3\001\002\000\004\022\103\001\002\000\006\012" +
    "\ufff6\013\ufff6\001\002\000\004\027\101\001\002\000\004" +
    "\022\106\001\002\000\006\012\ufff7\013\ufff7\001\002\000" +
    "\004\010\116\001\002\000\004\010\111\001\002\000\006" +
    "\005\ufffb\007\ufffb\001\002\000\004\007\113\001\002\000" +
    "\004\010\114\001\002\000\006\004\ufffb\005\ufffb\001\002" +
    "\000\004\004\uffff\001\002\000\006\005\ufffb\006\ufffb\001" +
    "\002\000\004\006\120\001\002\000\004\010\121\001\002" +
    "\000\006\004\ufffb\005\ufffb\001\002\000\004\004\ufffe\001" +
    "\002\000\004\010\124\001\002\000\012\004\ufffc\005\ufffc" +
    "\006\ufffc\007\ufffc\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\123\000\012\002\003\003\006\004\005\005\004\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\006\011\007\013\014\010\001" +
    "\001\000\002\001\001\000\006\007\016\014\010\001\001" +
    "\000\002\001\001\000\006\007\014\014\010\001\001\000" +
    "\002\001\001\000\006\010\022\022\021\001\001\000\006" +
    "\007\017\014\010\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\012\025\013\023\014\024\001\001\000\002" +
    "\001\001\000\006\012\056\014\024\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\020\027\030\030\001\001" +
    "\000\006\027\036\031\055\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\021\033\001\001\000\006\027\036" +
    "\031\034\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\016\041\026\040\001\001\000\002" +
    "\001\001\000\004\015\042\001\001\000\004\025\045\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\017\050\001\001\000\004\015" +
    "\051\001\001\000\004\025\052\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\014\060\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\015\063\023\064\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\015\070\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\011\073\015\072\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\015\076\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\024\101\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\024\104\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\004\111\005\004\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\004\114\005\004" +
    "\001\001\000\002\001\001\000\006\004\116\005\004\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\004\121" +
    "\005\004\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
 Tree = new DisegnaAlbero();   }public static DisegnaAlbero Tree;

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 Symbol s=_scanner.next_token(); Tree.push(s.toString(), 0); return s;   }


     public HashMap<String,HashMap<String,Integer>> table=new HashMap<>();
    
 
    public Object stack(int position) {
        return (((Symbol)stack.elementAt(tos+position)).value);
    };


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= prog EOF 
            { 
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // prog ::= header SEP car_section SEP race_section 
            { parser.Tree.reduce(5,"prog",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("prog",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // header ::= header1 TOK2 S header1 TOK3 S header1 
            { parser.Tree.reduce(7,"header",1);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("header",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // header ::= header1 TOK3 S header1 TOK2 S header1 
            { parser.Tree.reduce(7,"header",1);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("header",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // header1 ::= token1 
            { parser.Tree.reduce(1,"header1",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("header1",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // token1 ::= token1 TOK1 S 
            { parser.Tree.reduce(3,"token1",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("token1",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // token1 ::= 
            { parser.Tree.reduce(0,"token1",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("token1",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // car_section ::= cars cars 
            { parser.Tree.reduce(2,"car_section",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("car_section",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // car_section ::= car_section cars cars 
            { parser.Tree.reduce(3,"car_section",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("car_section",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // cars ::= car_name OT speeds CT 
            { parser.Tree.reduce(4,"cars",0);
              Object RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		HashMap s = (HashMap)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 parser.table.put(name, s); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cars",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // speeds ::= section_name EQ speed_value MS_WD 
            { parser.Tree.reduce(4,"speeds",0);
              HashMap RESULT =null;
		int snameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int snameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String sname = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int svleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int svright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer sv = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                HashMap<String,Integer> tab = new HashMap<String, Integer>();
                tab.put(sname, sv);
                RESULT = tab;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("speeds",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // speeds ::= speeds CM section_name EQ speed_value MS_WD 
            { parser.Tree.reduce(6,"speeds",0);
              HashMap RESULT =null;
		int tableft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int tabright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		HashMap tab = (HashMap)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int snameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int snameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String sname = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int svleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int svright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer sv = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                tab.put(sname, sv);
                RESULT = tab;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("speeds",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // car_name ::= QSTRING 
            { parser.Tree.reduce(1,"car_name",0);
              String RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = name; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("car_name",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // section_name ::= QSTRING 
            { parser.Tree.reduce(1,"section_name",0);
              String RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = name; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("section_name",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // speed_value ::= INUM 
            { parser.Tree.reduce(1,"speed_value",0);
              Integer RESULT =null;
		int spleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int spright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer sp = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = sp; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("speed_value",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // race_section ::= print_min_max performances 
            { parser.Tree.reduce(2,"race_section",0);
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object[] a = (Object[])((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 System.out.println("WINNER: " + a[0] + " " + a[1]); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("race_section",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // race_section ::= 
            { parser.Tree.reduce(0,"race_section",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("race_section",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // print_min_max ::= PRINTMM OP car_name CP OP section_names CP S 
            { parser.Tree.reduce(8,"print_min_max",0);
              Integer[] RESULT =null;
		int snleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int snright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Integer[] sn = (Integer[])((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 
                                                                System.out.println("Min: " + sn[0] + " Max: " + sn[1]);
                                                                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("print_min_max",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // section_names ::= section_name 
            { parser.Tree.reduce(1,"section_names",0);
              Integer[] RESULT =null;
		int snleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int snright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String sn = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                                    Integer[] min_max = new Integer[2];
                                    min_max[0] = 100000;
                                    min_max[1] = 0;
                                    Object carname = parser.stack(-3);
                                    HashMap<String, Integer> speeds = parser.table.get(carname);
                                    Integer speed = speeds.get(sn);
                                    if(speed < min_max[0]){
                                        min_max[0] = speed;
                                    }
                                    if(speed > min_max[1]){
                                        min_max[1] = speed;
                                    }
                                    RESULT = min_max;
                                 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("section_names",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // section_names ::= section_names CM section_name 
            { parser.Tree.reduce(3,"section_names",0);
              Integer[] RESULT =null;
		int mmsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int mmsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Integer[] mms = (Integer[])((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int snleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int snright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String sn = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                        Object carname = parser.stack(-5);
                                        HashMap<String,Integer> speeds = parser.table.get(carname);
                                        Integer speed = speeds.get(sn);
                                        if(speed < mms[0]){
                                            mms[0] = speed;
                                        }
                                        if(speed > mms[1]){
                                            mms[1] = speed;
                                        }
                                        RESULT = mms;
                                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("section_names",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // performances ::= performance 
            { parser.Tree.reduce(1,"performances",0);
              Object[] RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object[] a = (Object[])((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("performances",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // performances ::= performances performance 
            { parser.Tree.reduce(2,"performances",0);
              Object[] RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object[] p = (Object[])((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object[] a = (Object[])((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                Object[] f = new Object[2];
                                if((Integer)a[1] < (Integer)p[1] ){
                                    f[1] = a[1];
                                    f[0] = a[0];
                                }
                                RESULT = f;
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("performances",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // performance ::= car_name ARR parts S 
            { parser.Tree.reduce(4,"performance",0);
              Object[] RESULT =null;
		int cnleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int cnright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String cn = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int totalleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int totalright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer total = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
                                                Object[] a = new Object[2];
                                                a[0] = cn;
                                                a[1] = total;
                                                System.out.println("Total: " + total);
                                                RESULT = a;
                                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("performance",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // parts ::= nt2 part 
            { parser.Tree.reduce(2,"parts",0);
              Integer RESULT =null;
		int totleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int totright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer tot = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = tot; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parts",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // parts ::= parts OR nt3 part 
            { parser.Tree.reduce(4,"parts",0);
              Integer RESULT =null;
		int tot2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tot2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Integer tot2 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int totleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int totright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer tot = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                                RESULT = tot + tot2;
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parts",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // nt2 ::= 
            { parser.Tree.reduce(0,"nt2",0);
              String RESULT =null;
		 System.out.println((String)parser.stack(-1)); RESULT = (String)parser.stack(-1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("nt2",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // nt3 ::= 
            { parser.Tree.reduce(0,"nt3",0);
              String RESULT =null;
		 RESULT = (String)parser.stack(-3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("nt3",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // part ::= part_name COL drive_stats 
            { parser.Tree.reduce(3,"part",0);
              Integer RESULT =null;
		int pnleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int pnright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Integer pn = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int dsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer ds = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                                            System.out.println("PART" + pn + ": " + ds + " s");
                                            RESULT = (Integer)ds;
                                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("part",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // part_name ::= PART INUM 
            { parser.Tree.reduce(2,"part_name",0);
              Integer RESULT =null;
		int int_numleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int int_numright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer int_num = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = int_num; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("part_name",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // drive_stats ::= nt0 section_name distance M_WD 
            { parser.Tree.reduce(4,"drive_stats",0);
              Integer RESULT =null;
		int markerleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int markerright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String marker = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int snleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int snright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String sn = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int disleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int disright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer dis = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                                String carname = marker;
                                HashMap<String,Integer> speeds = parser.table.get(carname);
                                Integer speed = speeds.get(sn);
                                RESULT = dis / speed;
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("drive_stats",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // drive_stats ::= drive_stats CM nt1 section_name distance M_WD 
            { parser.Tree.reduce(6,"drive_stats",0);
              Integer RESULT =null;
		int res2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int res2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Integer res2 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int markerleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int markerright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String marker = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int snleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int snright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String sn = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int disleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int disright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer dis = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                                String carname = marker;
                                HashMap<String,Integer> speeds = parser.table.get(carname);
                                Integer speed = speeds.get(sn);
                                RESULT = (dis / speed) + res2;
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("drive_stats",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // nt0 ::= 
            { parser.Tree.reduce(0,"nt0",0);
              String RESULT =null;
		 RESULT = (String)parser.stack(-2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("nt0",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // nt1 ::= 
            { parser.Tree.reduce(0,"nt1",0);
              String RESULT =null;
		 RESULT = (String)parser.stack(-4); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("nt1",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // distance ::= INUM 
            { parser.Tree.reduce(1,"distance",0);
              Integer RESULT =null;
		int int_numleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int int_numright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer int_num = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = int_num; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("distance",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
