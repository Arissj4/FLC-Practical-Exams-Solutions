
//----------------------------------------------------
// The following code was generated by CUP v0.11b beta 20140226
//----------------------------------------------------

import java_cup.runtime.*;
import java.util.*;
import java.io.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b beta 20140226 generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\042\000\002\002\004\000\002\002\005\000\002\003" +
    "\011\000\002\003\014\000\002\003\003\000\002\004\005" +
    "\000\002\004\002\000\002\005\004\000\002\013\007\000" +
    "\002\013\007\000\002\013\006\000\002\013\006\000\002" +
    "\013\006\000\002\013\006\000\002\013\004\000\002\007" +
    "\005\000\002\010\005\000\002\006\003\000\002\006\003" +
    "\000\002\006\005\000\002\006\005\000\002\012\006\000" +
    "\002\011\003\000\002\011\005\000\002\016\006\000\002" +
    "\016\005\000\002\015\004\000\002\015\004\000\002\017" +
    "\005\000\002\017\005\000\002\014\007\000\002\014\007" +
    "\000\002\020\007\000\002\020\010" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\132\000\010\004\ufffb\005\ufffb\006\ufffb\001\002\000" +
    "\010\004\ufffd\005\123\006\122\001\002\000\004\002\121" +
    "\001\002\000\004\004\007\001\002\000\004\014\012\001" +
    "\002\000\006\024\061\025\063\001\002\000\004\002\000" +
    "\001\002\000\012\007\014\010\015\015\016\016\013\001" +
    "\002\000\006\021\032\032\034\001\002\000\006\024\ufff3" +
    "\025\ufff3\001\002\000\006\015\016\016\013\001\002\000" +
    "\006\021\032\032\034\001\002\000\004\010\025\001\002" +
    "\000\004\010\021\001\002\000\006\007\022\015\016\001" +
    "\002\000\006\024\ufff5\025\ufff5\001\002\000\004\007\024" +
    "\001\002\000\006\024\ufff8\025\ufff8\001\002\000\006\007" +
    "\026\016\013\001\002\000\006\024\ufff7\025\ufff7\001\002" +
    "\000\004\007\030\001\002\000\006\024\ufff9\025\ufff9\001" +
    "\002\000\024\007\uffef\012\uffef\013\uffef\017\uffef\020\uffef" +
    "\022\uffef\023\uffef\030\uffef\031\uffef\001\002\000\004\011" +
    "\042\001\002\000\010\017\035\022\036\023\037\001\002" +
    "\000\024\007\ufff0\012\ufff0\013\ufff0\017\ufff0\020\ufff0\022" +
    "\ufff0\023\ufff0\030\ufff0\031\ufff0\001\002\000\006\007\ufff2" +
    "\010\ufff2\001\002\000\006\021\032\032\034\001\002\000" +
    "\006\021\032\032\034\001\002\000\024\007\uffed\012\uffed" +
    "\013\uffed\017\uffed\020\uffed\022\uffed\023\uffed\030\uffed\031" +
    "\uffed\001\002\000\024\007\uffee\012\uffee\013\uffee\017\uffee" +
    "\020\uffee\022\uffee\023\037\030\uffee\031\uffee\001\002\000" +
    "\006\021\032\032\034\001\002\000\006\012\046\013\045" +
    "\001\002\000\012\012\uffeb\013\uffeb\022\036\023\037\001" +
    "\002\000\006\021\032\032\034\001\002\000\024\007\uffec" +
    "\012\uffec\013\uffec\017\uffec\020\uffec\022\uffec\023\uffec\030" +
    "\uffec\031\uffec\001\002\000\012\012\uffea\013\uffea\022\036" +
    "\023\037\001\002\000\004\007\053\001\002\000\004\007" +
    "\052\001\002\000\006\024\ufff6\025\ufff6\001\002\000\006" +
    "\024\ufff4\025\ufff4\001\002\000\010\020\055\022\036\023" +
    "\037\001\002\000\006\007\ufff1\010\ufff1\001\002\000\010" +
    "\002\ufffa\024\061\025\063\001\002\000\004\007\116\001" +
    "\002\000\004\007\115\001\002\000\006\015\112\016\111" +
    "\001\002\000\006\024\061\025\063\001\002\000\006\015" +
    "\065\016\064\001\002\000\004\026\103\001\002\000\004" +
    "\026\066\001\002\000\006\021\032\032\034\001\002\000" +
    "\010\021\032\027\075\032\034\001\002\000\010\022\036" +
    "\023\037\030\071\001\002\000\006\021\032\032\034\001" +
    "\002\000\010\022\036\023\037\031\073\001\002\000\004" +
    "\007\074\001\002\000\010\021\uffe1\027\uffe1\032\uffe1\001" +
    "\002\000\004\007\uffe3\001\002\000\010\022\036\023\037" +
    "\030\077\001\002\000\006\021\032\032\034\001\002\000" +
    "\010\022\036\023\037\031\101\001\002\000\004\007\102" +
    "\001\002\000\010\021\uffe0\027\uffe0\032\uffe0\001\002\000" +
    "\006\021\032\032\034\001\002\000\010\021\032\027\105" +
    "\032\034\001\002\000\004\007\uffe2\001\002\000\006\024" +
    "\061\025\063\001\002\000\006\024\061\025\063\001\002" +
    "\000\010\002\uffe9\024\uffe9\025\uffe9\001\002\000\006\021" +
    "\032\032\034\001\002\000\006\021\032\032\034\001\002" +
    "\000\010\007\uffe5\022\036\023\037\001\002\000\010\007" +
    "\uffe4\022\036\023\037\001\002\000\010\002\uffe7\024\uffe7" +
    "\025\uffe7\001\002\000\010\002\uffe6\024\uffe6\025\uffe6\001" +
    "\002\000\006\024\061\025\063\001\002\000\010\002\uffe8" +
    "\024\uffe8\025\uffe8\001\002\000\004\002\001\001\002\000" +
    "\004\007\125\001\002\000\004\007\124\001\002\000\010" +
    "\004\ufffc\005\ufffc\006\ufffc\001\002\000\006\005\ufffb\006" +
    "\ufffb\001\002\000\006\005\123\006\127\001\002\000\004" +
    "\007\130\001\002\000\010\004\ufffb\005\ufffb\006\ufffb\001" +
    "\002\000\010\004\uffff\005\123\006\132\001\002\000\004" +
    "\007\133\001\002\000\006\004\ufffb\005\ufffb\001\002\000" +
    "\006\004\ufffe\005\123\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\132\000\010\002\004\003\005\004\003\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\005\010\013\007\001\001\000\012\014\056\015\061\016" +
    "\055\017\057\001\001\000\002\001\001\000\006\007\016" +
    "\010\017\001\001\000\006\006\053\012\030\001\001\000" +
    "\002\001\001\000\006\007\047\010\050\001\001\000\006" +
    "\006\032\012\030\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\007\022\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\010\026\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\006\040\012\030\001\001" +
    "\000\006\006\037\012\030\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\006\043\011\042\012\030\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\006\046\012" +
    "\030\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\014\056" +
    "\015\116\017\057\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\014\056\015\105\017\057" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\006\067\012\030\020\066\001\001\000\006" +
    "\006\075\012\030\001\001\000\002\001\001\000\006\006" +
    "\071\012\030\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\006\077\012\030\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\006\067\012\030\020" +
    "\103\001\001\000\006\006\075\012\030\001\001\000\002" +
    "\001\001\000\010\014\056\015\106\017\057\001\001\000" +
    "\010\014\056\015\107\017\057\001\001\000\002\001\001" +
    "\000\006\006\113\012\030\001\001\000\006\006\112\012" +
    "\030\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\014\056\015\117\017" +
    "\057\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\004" +
    "\125\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\004\130\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\004\133\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {

    table = new HashMap <String, HashMap <String, Float>>();

 Tree = new DisegnaAlbero();   }public static DisegnaAlbero Tree;

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 Symbol s=_scanner.next_token(); Tree.push(s.toString(), 0); return s;   }


    public HashMap <String, HashMap <String, Float>> table;

    public Object stack(int position){
        return (((Symbol)stack.elementAt(tos + position)).value);
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= prog EOF 
            { 
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // prog ::= header SEP race_section 
            { parser.Tree.reduce(3,"prog",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("prog",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // header ::= token_1 TOK2 SCOLON token_1 TOK2 SCOLON token_1 
            { parser.Tree.reduce(7,"header",1);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("header",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // header ::= token_1 TOK2 SCOLON token_1 TOK2 SCOLON token_1 TOK2 SCOLON token_1 
            { parser.Tree.reduce(10,"header",1);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("header",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // header ::= token_1 
            { parser.Tree.reduce(1,"header",1);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("header",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // token_1 ::= token_1 TOK1 SCOLON 
            { parser.Tree.reduce(3,"token_1",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("token_1",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // token_1 ::= 
            { parser.Tree.reduce(0,"token_1",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("token_1",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // race_section ::= sta commands 
            { parser.Tree.reduce(2,"race_section",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("race_section",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // sta ::= START_WD battery_ass DASH fuel_ass SCOLON 
            { parser.Tree.reduce(5,"sta",0);
              Float[] RESULT =null;
		int battleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int battright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Float batt = (Float)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int fuelleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fuelright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Float fuel = (Float)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new Float[2]; RESULT[0] = batt; RESULT[1] = fuel; System.out.println("battery=" + RESULT[0] + " " + "fuel=" + RESULT[1]);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sta",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // sta ::= START_WD fuel_ass DASH battery_ass SCOLON 
            { parser.Tree.reduce(5,"sta",0);
              Float[] RESULT =null;
		int fuelleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int fuelright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Float fuel = (Float)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int battleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int battright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Float batt = (Float)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new Float[2]; RESULT[0] = batt; RESULT[1] = fuel; System.out.println("battery=" + RESULT[0] + " " + "fuel=" + RESULT[1]);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sta",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // sta ::= START_WD battery_ass DASH SCOLON 
            { parser.Tree.reduce(4,"sta",0);
              Float[] RESULT =null;
		int battleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int battright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Float batt = (Float)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		RESULT = new Float[2]; RESULT[0] = batt; RESULT[1] = 100.0f; System.out.println("battery=" + RESULT[0] + " " + "fuel=" + RESULT[1]);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sta",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // sta ::= START_WD DASH fuel_ass SCOLON 
            { parser.Tree.reduce(4,"sta",0);
              Float[] RESULT =null;
		int fuelleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fuelright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Float fuel = (Float)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new Float[2]; RESULT[0] = 100.0f; RESULT[1] = fuel; System.out.println("battery=" + RESULT[0] + " " + "fuel=" + RESULT[1]);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sta",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // sta ::= START_WD fuel_ass DASH SCOLON 
            { parser.Tree.reduce(4,"sta",0);
              Float[] RESULT =null;
		int fuelleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int fuelright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Float fuel = (Float)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		RESULT = new Float[2]; RESULT[0] = 100.0f; RESULT[1] = fuel; System.out.println("battery=" + RESULT[0] + " " + "fuel=" + RESULT[1]);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sta",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // sta ::= START_WD DASH battery_ass SCOLON 
            { parser.Tree.reduce(4,"sta",0);
              Float[] RESULT =null;
		int battleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int battright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Float batt = (Float)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new Float[2]; RESULT[0] = batt; RESULT[1] = 100.0f; System.out.println("battery=" + RESULT[0] + " " + "fuel=" + RESULT[1]);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sta",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // sta ::= START_WD SCOLON 
            { parser.Tree.reduce(2,"sta",0);
              Float[] RESULT =null;
		RESULT = new Float[2]; RESULT[0] = 100.0f; RESULT[1] = 100.0f; System.out.println("battery=" + RESULT[0] + " " + "fuel=" + RESULT[1]);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sta",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // battery_ass ::= BAT_WD exp KWH_WD 
            { parser.Tree.reduce(3,"battery_ass",0);
              Float RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Float ex = (Float)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = ex; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("battery_ass",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // fuel_ass ::= FUE_WD exp LIT_WD 
            { parser.Tree.reduce(3,"fuel_ass",0);
              Float RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Float ex = (Float)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = ex; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("fuel_ass",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // exp ::= FNUM 
            { parser.Tree.reduce(1,"exp",0);
              Float RESULT =null;
		int fnumleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fnumright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Float fnum = (Float)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = fnum; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // exp ::= max 
            { parser.Tree.reduce(1,"exp",0);
              Float RESULT =null;
		int mxleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mxright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Float mx = (Float)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = mx; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // exp ::= exp PLUS_WD exp 
            { parser.Tree.reduce(3,"exp",0);
              Float RESULT =null;
		int ex1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int ex1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Float ex1 = (Float)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ex2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ex2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Float ex2 = (Float)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = ex1 + ex2; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // exp ::= exp STAR_WD exp 
            { parser.Tree.reduce(3,"exp",0);
              Float RESULT =null;
		int ex1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int ex1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Float ex1 = (Float)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ex2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ex2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Float ex2 = (Float)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = ex1 * ex2; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // max ::= MAX_WD OP exp2 CP 
            { parser.Tree.reduce(4,"max",0);
              Float RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Float ex = (Float)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = ex; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("max",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // exp2 ::= exp 
            { parser.Tree.reduce(1,"exp2",0);
              Float RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Float ex = (Float)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = ex; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp2",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // exp2 ::= exp2 COMMA exp 
            { parser.Tree.reduce(3,"exp2",0);
              Float RESULT =null;
		int pexleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int pexright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Float pex = (Float)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Float ex = (Float)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(ex > pex){ RESULT = ex; }else { RESULT = pex; } 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp2",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // commands ::= command command command command 
            { parser.Tree.reduce(4,"commands",0);
              Float[] RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("commands",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // commands ::= commands command command 
            { parser.Tree.reduce(3,"commands",0);
              Float[] RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("commands",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // command ::= mod SCOLON 
            { parser.Tree.reduce(2,"command",0);
              Float[] RESULT =null;
		int narryleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int narryright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Float[] narry = (Float[])((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = narry; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("command",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // command ::= use SCOLON 
            { parser.Tree.reduce(2,"command",0);
              Float[] RESULT =null;
		int narryleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int narryright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Float[] narry = (Float[])((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = narry; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("command",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // mod ::= MOD_WD BAT_WD exp 
            { parser.Tree.reduce(3,"mod",0);
              Float[] RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Float ex = (Float)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                                Float[] prearry = (Float[])parser.stack(-3);
                                Float[] newarry = new Float[2];
                                newarry[0] = ex + prearry[0];
                                newarry[1] = prearry[1];
                                System.out.println("battery=" + newarry[0] + " " + "fuel=" + newarry[1]);
                                RESULT = newarry;
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("mod",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // mod ::= MOD_WD FUE_WD exp 
            { parser.Tree.reduce(3,"mod",0);
              Float[] RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Float ex = (Float)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                            Float[] prearry = (Float[])parser.stack(-3);
                            Float[] newarry = new Float[2];
                            newarry[0] = prearry[0];
                            newarry[1] = ex + prearry[1];
                            System.out.println("battery=" + newarry[0] + " " + "fuel=" + newarry[1]);
                            RESULT = newarry;
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("mod",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // use ::= USE_WD BAT_WD DO_WD cons DONE_WD 
            { parser.Tree.reduce(5,"use",0);
              Float[] RESULT =null;
		int newfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int newfright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Float[] newf = (Float[])((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = newf; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("use",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // use ::= USE_WD FUE_WD DO_WD cons DONE_WD 
            { parser.Tree.reduce(5,"use",0);
              Float[] RESULT =null;
		int newfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int newfright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Float[] newf = (Float[])((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = newf; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("use",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // cons ::= exp KM_WD exp UKM_WD SCOLON 
            { parser.Tree.reduce(5,"cons",0);
              Float[] RESULT =null;
		int ex1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int ex1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Float ex1 = (Float)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int ex2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int ex2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Float ex2 = (Float)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 Float[] prearry = (Float[])parser.stack(-8);
                                                String b = (String)parser.stack(-6);
                                                Float[] newarry = new Float[2];
                                                if(b.equals("FUEL")){
                                                    newarry[0] = prearry[0];
                                                    newarry[1] = prearry[1] - (ex1 * ex2);
                                                }else if(b.equals("BATTERY")){
                                                    newarry[0] = prearry[0] - (ex1 * ex2);
                                                    newarry[1] = prearry[1];
                                                }
                                                System.out.println("battery=" + newarry[0] + " " + "fuel=" + newarry[1]);
                                                RESULT = newarry;
                                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cons",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // cons ::= cons exp KM_WD exp UKM_WD SCOLON 
            { parser.Tree.reduce(6,"cons",0);
              Float[] RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Float[] a = (Float[])((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int ex1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int ex1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Float ex1 = (Float)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int ex2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int ex2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Float ex2 = (Float)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 
                                                String b = (String)parser.stack(-7);
                                                Float[] newarry = new Float[2];
                                                if(b.equals("FUEL")){
                                                    newarry[0] = a[0];
                                                    newarry[1] = a[1] - (ex1 * ex2);
                                                }else if(b.equals("BATTERY")){
                                                    newarry[0] = a[0] - (ex1 * ex2);
                                                    newarry[1] = a[1];
                                                }
                                                System.out.println("battery=" + newarry[0] + " " + "fuel=" + newarry[1]);
                                                RESULT = newarry;
                                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cons",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
