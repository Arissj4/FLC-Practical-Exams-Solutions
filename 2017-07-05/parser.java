
//----------------------------------------------------
// The following code was generated by CUP v0.11b beta 20140226
//----------------------------------------------------

import java_cup.runtime.*;
import java.util.*;
import java.io.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b beta 20140226 generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\064\000\002\002\004\000\002\002\005\000\002\003" +
    "\006\000\002\003\011\000\002\003\014\000\002\003\003" +
    "\000\002\004\005\000\002\004\005\000\002\004\002\000" +
    "\002\005\004\000\002\011\013\000\002\011\013\000\002" +
    "\011\010\000\002\011\006\000\002\011\011\000\002\011" +
    "\007\000\002\011\005\000\002\017\006\000\002\017\005" +
    "\000\002\020\004\000\002\020\004\000\002\020\004\000" +
    "\002\015\007\000\002\015\010\000\002\007\006\000\002" +
    "\007\007\000\002\014\007\000\002\014\010\000\002\021" +
    "\006\000\002\022\006\000\002\022\004\000\002\022\005" +
    "\000\002\022\005\000\002\022\005\000\002\025\005\000" +
    "\002\025\006\000\002\012\012\000\002\012\013\000\002" +
    "\013\012\000\002\013\013\000\002\016\011\000\002\016" +
    "\011\000\002\016\011\000\002\016\011\000\002\023\003" +
    "\000\002\023\005\000\002\023\003\000\002\023\005\000" +
    "\002\024\003\000\002\024\005\000\002\024\003\000\002" +
    "\024\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\253\000\012\004\ufff9\005\ufff9\006\ufff9\007\ufff9\001" +
    "\002\000\004\002\255\001\002\000\012\004\ufffc\005\242" +
    "\006\241\007\240\001\002\000\004\004\007\001\002\000" +
    "\004\023\011\001\002\000\010\016\056\025\052\026\051" +
    "\001\002\000\010\012\014\024\015\025\013\001\002\000" +
    "\004\002\000\001\002\000\004\041\037\001\002\000\010" +
    "\010\026\024\030\025\027\001\002\000\004\041\016\001" +
    "\002\000\004\011\017\001\002\000\004\041\020\001\002" +
    "\000\006\010\021\012\022\001\002\000\010\016\ufff5\025" +
    "\ufff5\026\ufff5\001\002\000\004\025\023\001\002\000\004" +
    "\041\024\001\002\000\004\010\025\001\002\000\010\016" +
    "\ufff7\025\ufff7\026\ufff7\001\002\000\010\016\ufff1\025\ufff1" +
    "\026\ufff1\001\002\000\004\041\035\001\002\000\004\041" +
    "\031\001\002\000\004\011\032\001\002\000\004\041\033" +
    "\001\002\000\004\010\034\001\002\000\010\016\ufff3\025" +
    "\ufff3\026\ufff3\001\002\000\004\010\036\001\002\000\010" +
    "\016\ufff2\025\ufff2\026\ufff2\001\002\000\006\010\040\012" +
    "\041\001\002\000\010\016\ufff4\025\ufff4\026\ufff4\001\002" +
    "\000\004\024\042\001\002\000\004\041\043\001\002\000" +
    "\004\011\044\001\002\000\004\041\045\001\002\000\004" +
    "\010\046\001\002\000\010\016\ufff6\025\ufff6\026\ufff6\001" +
    "\002\000\012\002\ufff8\016\056\025\052\026\051\001\002" +
    "\000\004\010\235\001\002\000\004\013\231\001\002\000" +
    "\006\033\174\034\173\001\002\000\006\010\155\026\156" +
    "\001\002\000\004\010\154\001\002\000\010\016\056\025" +
    "\052\026\051\001\002\000\010\021\057\032\063\040\061" +
    "\001\002\000\010\021\057\032\063\040\061\001\002\000" +
    "\010\013\077\030\065\031\066\001\002\000\004\017\074" +
    "\001\002\000\004\015\071\001\002\000\010\021\057\032" +
    "\063\040\061\001\002\000\012\013\uffe3\022\uffe3\030\uffe3" +
    "\031\uffe3\001\002\000\010\021\057\032\063\040\061\001" +
    "\002\000\010\021\057\032\063\040\061\001\002\000\012" +
    "\013\uffe1\022\uffe1\030\uffe1\031\uffe1\001\002\000\012\013" +
    "\uffe2\022\uffe2\030\uffe2\031\uffe2\001\002\000\004\015\072" +
    "\001\002\000\004\041\073\001\002\000\012\013\uffe4\022" +
    "\uffe4\030\uffe4\031\uffe4\001\002\000\004\040\075\001\002" +
    "\000\012\011\uffdf\015\uffdf\022\uffdf\041\076\001\002\000" +
    "\010\011\uffde\015\uffde\022\uffde\001\002\000\004\037\100" +
    "\001\002\000\004\041\140\001\002\000\006\014\102\037" +
    "\103\001\002\000\006\010\uffe7\027\113\001\002\000\004" +
    "\041\104\001\002\000\004\011\105\001\002\000\004\041" +
    "\106\001\002\000\004\011\107\001\002\000\004\025\110" +
    "\001\002\000\004\041\111\001\002\000\004\010\112\001" +
    "\002\000\006\014\uffdc\037\uffdc\001\002\000\004\013\115" +
    "\001\002\000\004\010\uffe6\001\002\000\004\037\117\001" +
    "\002\000\006\014\127\037\130\001\002\000\004\041\120" +
    "\001\002\000\004\011\121\001\002\000\004\041\122\001" +
    "\002\000\004\011\123\001\002\000\004\025\124\001\002" +
    "\000\004\041\125\001\002\000\004\010\126\001\002\000" +
    "\006\014\uffdb\037\uffdb\001\002\000\004\010\uffe5\001\002" +
    "\000\004\041\131\001\002\000\004\011\132\001\002\000" +
    "\004\041\133\001\002\000\004\011\134\001\002\000\004" +
    "\025\135\001\002\000\004\041\136\001\002\000\004\010" +
    "\137\001\002\000\006\014\uffda\037\uffda\001\002\000\004" +
    "\011\141\001\002\000\004\041\142\001\002\000\004\011" +
    "\143\001\002\000\004\025\144\001\002\000\004\041\145" +
    "\001\002\000\004\010\146\001\002\000\006\014\uffdd\037" +
    "\uffdd\001\002\000\010\022\150\030\065\031\066\001\002" +
    "\000\012\013\uffe0\022\uffe0\030\uffe0\031\uffe0\001\002\000" +
    "\010\016\056\025\052\026\051\001\002\000\010\016\056" +
    "\025\052\026\051\001\002\000\012\002\ufff0\016\ufff0\025" +
    "\ufff0\026\ufff0\001\002\000\012\002\uffed\016\uffed\025\uffed" +
    "\026\uffed\001\002\000\012\002\uffee\016\uffee\025\uffee\026" +
    "\uffee\001\002\000\004\013\157\001\002\000\004\040\160" +
    "\001\002\000\004\015\170\001\002\000\006\014\163\040" +
    "\162\001\002\000\004\015\165\001\002\000\004\040\164" +
    "\001\002\000\006\010\uffea\026\uffea\001\002\000\004\041" +
    "\166\001\002\000\004\010\167\001\002\000\006\014\uffe8" +
    "\040\uffe8\001\002\000\004\041\171\001\002\000\004\010" +
    "\172\001\002\000\006\014\uffe9\040\uffe9\001\002\000\004" +
    "\020\220\001\002\000\004\020\175\001\002\000\006\035" +
    "\176\036\177\001\002\000\004\021\210\001\002\000\004" +
    "\021\200\001\002\000\006\040\061\041\203\001\002\000" +
    "\006\011\uffd5\022\uffd5\001\002\000\006\011\204\022\205" +
    "\001\002\000\006\011\uffd3\022\uffd3\001\002\000\006\040" +
    "\061\041\207\001\002\000\004\010\uffd9\001\002\000\006" +
    "\011\uffd4\022\uffd4\001\002\000\006\011\uffd2\022\uffd2\001" +
    "\002\000\006\040\061\041\213\001\002\000\006\011\214" +
    "\022\215\001\002\000\006\011\uffd1\022\uffd1\001\002\000" +
    "\006\011\uffcf\022\uffcf\001\002\000\006\040\061\041\217" +
    "\001\002\000\004\010\uffd8\001\002\000\006\011\uffd0\022" +
    "\uffd0\001\002\000\006\011\uffce\022\uffce\001\002\000\006" +
    "\035\221\036\222\001\002\000\004\021\226\001\002\000" +
    "\004\021\223\001\002\000\006\040\061\041\203\001\002" +
    "\000\006\011\204\022\225\001\002\000\004\010\uffd7\001" +
    "\002\000\006\040\061\041\213\001\002\000\006\011\214" +
    "\022\230\001\002\000\004\010\uffd6\001\002\000\004\040" +
    "\160\001\002\000\006\014\233\040\162\001\002\000\004" +
    "\040\234\001\002\000\006\010\uffeb\026\uffeb\001\002\000" +
    "\012\002\uffec\016\uffec\025\uffec\026\uffec\001\002\000\010" +
    "\016\056\025\052\026\051\001\002\000\012\002\uffef\016" +
    "\uffef\025\uffef\026\uffef\001\002\000\004\010\245\001\002" +
    "\000\004\010\244\001\002\000\004\010\243\001\002\000" +
    "\012\004\ufffb\005\ufffb\006\ufffb\007\ufffb\001\002\000\012" +
    "\004\ufffa\005\ufffa\006\ufffa\007\ufffa\001\002\000\012\004" +
    "\ufff9\005\ufff9\006\ufff9\007\ufff9\001\002\000\012\004\uffff" +
    "\005\242\006\241\007\247\001\002\000\004\010\250\001" +
    "\002\000\012\004\ufff9\005\ufff9\006\ufff9\007\ufff9\001\002" +
    "\000\012\004\ufffe\005\242\006\241\007\252\001\002\000" +
    "\004\010\253\001\002\000\010\004\ufff9\005\ufff9\006\ufff9" +
    "\001\002\000\010\004\ufffd\005\242\006\241\001\002\000" +
    "\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\253\000\010\002\003\003\005\004\004\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\005\011\011\007\001\001\000\014\014\053\015\052\016" +
    "\047\017\046\020\054\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\014" +
    "\053\015\052\016\047\020\235\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\014\053\015\052\016\047\020\150" +
    "\001\001\000\006\022\057\025\061\001\001\000\006\022" +
    "\146\025\061\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\022\063\025\061\001\001\000" +
    "\002\001\001\000\006\022\067\025\061\001\001\000\006" +
    "\022\066\025\061\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\012\100\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\021\113\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\013\115\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\014\053\015\052\016\047\020" +
    "\151\001\001\000\012\014\053\015\052\016\047\020\152" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\007\160\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\023" +
    "\201\025\200\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\025\205\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\024\210" +
    "\025\211\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\025\215\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\023\223\025\200" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\024" +
    "\226\025\211\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\007\231\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\014\053" +
    "\015\052\016\047\020\236\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\004\245\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\004\250\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\004\253\001" +
    "\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {

    table = new HashMap <String, HashMap <String, Integer>>();

 Tree = new DisegnaAlbero();   }public static DisegnaAlbero Tree;

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 Symbol s=_scanner.next_token(); Tree.push(s.toString(), 0); return s;   }


    public HashMap <String, HashMap <String, Integer>> table;

    public Object stack(int position){
        return (((Symbol)stack.elementAt(tos + position)).value);
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= prog EOF 
            { 
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // prog ::= header SEP car_section 
            { parser.Tree.reduce(3,"prog",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("prog",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // header ::= header1 TOK3 SCOLON header1 
            { parser.Tree.reduce(4,"header",1);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("header",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // header ::= header1 TOK3 SCOLON header1 TOK3 SCOLON header1 
            { parser.Tree.reduce(7,"header",1);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("header",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // header ::= header1 TOK3 SCOLON header1 TOK3 SCOLON header1 TOK3 SCOLON header1 
            { parser.Tree.reduce(10,"header",1);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("header",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // header ::= header1 
            { parser.Tree.reduce(1,"header",1);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("header",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // header1 ::= header1 TOK1 SCOLON 
            { parser.Tree.reduce(3,"header1",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("header1",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // header1 ::= header1 TOK2 SCOLON 
            { parser.Tree.reduce(3,"header1",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("header1",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // header1 ::= 
            { parser.Tree.reduce(0,"header1",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("header1",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // car_section ::= set_ins commands 
            { parser.Tree.reduce(2,"car_section",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("car_section",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // set_ins ::= SET_WD POS_WD SINUM COMMA SINUM DASH FUE_WD SINUM SCOLON 
            { parser.Tree.reduce(9,"set_ins",0);
              Integer[] RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Integer x = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Integer y = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer f = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                                                                    Integer[] pos = new Integer[3];
                                                                    pos[0] = x;
                                                                    pos[1] = y;
                                                                    pos[2] = f;
                                                                    RESULT = pos;
                                                                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("set_ins",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // set_ins ::= SET_WD FUE_WD SINUM DASH POS_WD SINUM COMMA SINUM SCOLON 
            { parser.Tree.reduce(9,"set_ins",0);
              Integer[] RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Integer f = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Integer x = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer y = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                                                                Integer[] pos = new Integer[3];
                                                                pos[0] = x;
                                                                pos[1] = y;
                                                                pos[2] = f;
                                                                RESULT = pos;    
                                                                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("set_ins",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // set_ins ::= SET_WD POS_WD SINUM COMMA SINUM SCOLON 
            { parser.Tree.reduce(6,"set_ins",0);
              Integer[] RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Integer x = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer y = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                                                Integer[] pos = new Integer[3];
                                                pos[0] = x;
                                                pos[1] = y;
                                                pos[2] = 0;
                                                RESULT = pos;                        
                                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("set_ins",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // set_ins ::= SET_WD FUE_WD SINUM SCOLON 
            { parser.Tree.reduce(4,"set_ins",0);
              Integer[] RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer f = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                                Integer[] pos = new Integer[3];
                                pos[0] = 0;
                                pos[1] = 0;
                                pos[2] = f;
                                RESULT = pos;                                        
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("set_ins",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // set_ins ::= SET_WD DASH POS_WD SINUM COMMA SINUM SCOLON 
            { parser.Tree.reduce(7,"set_ins",0);
              Integer[] RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Integer x = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer y = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                                                    Integer[] pos = new Integer[3];
                                                    pos[0] = x;
                                                    pos[1] = y;
                                                    pos[2] = 0;
                                                    RESULT = pos;                    
                                                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("set_ins",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // set_ins ::= SET_WD DASH FUE_WD SINUM SCOLON 
            { parser.Tree.reduce(5,"set_ins",0);
              Integer[] RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer f = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                                        Integer[] pos = new Integer[3];
                                        pos[0] = 0;
                                        pos[1] = 0;
                                        pos[2] = f;
                                        RESULT = pos;                                
                                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("set_ins",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // set_ins ::= SET_WD DASH SCOLON 
            { parser.Tree.reduce(3,"set_ins",0);
              Integer[] RESULT =null;
		
                        Integer[] pos = new Integer[3];
                        pos[0] = 0;
                        pos[1] = 0;
                        pos[2] = 0;
                        RESULT = pos;                                                
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("set_ins",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // commands ::= command command command command 
            { parser.Tree.reduce(4,"commands",0);
              Integer[] RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("commands",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // commands ::= commands command command 
            { parser.Tree.reduce(3,"commands",0);
              Integer[] RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("commands",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // command ::= declare SCOLON 
            { parser.Tree.reduce(2,"command",0);
              Integer[] RESULT =null;
		int deleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int deright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer[] de = (Integer[])((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT=de;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("command",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // command ::= if SCOLON 
            { parser.Tree.reduce(2,"command",0);
              Integer[] RESULT =null;
		int resleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int resright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer[] res = (Integer[])((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT=res;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("command",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // command ::= fuel SCOLON 
            { parser.Tree.reduce(2,"command",0);
              Integer[] RESULT =null;
		int feleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int feright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer[] fe = (Integer[])((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT=fe;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("command",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // declare ::= DEC_WD OC atts CC VAR 
            { parser.Tree.reduce(5,"declare",0);
              Integer[] RESULT =null;
		int attleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int attright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		HashMap att = (HashMap)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                                                RESULT = (Integer[])parser.stack(-5);
                                                parser.table.put(name, att);
                                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declare",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // declare ::= declare DEC_WD OC atts CC VAR 
            { parser.Tree.reduce(6,"declare",0);
              Integer[] RESULT =null;
		int decleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int decright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Integer[] dec = (Integer[])((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int attleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int attright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		HashMap att = (HashMap)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                                RESULT = dec;
                                                parser.table.put(name, att);
                                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declare",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // atts ::= VAR EQ SINUM SCOLON 
            { parser.Tree.reduce(4,"atts",0);
              HashMap RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int valueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer value = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                        HashMap<String, Integer> a = new HashMap<String, Integer>();
                        a.put(name, value);
                        RESULT = a;
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("atts",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // atts ::= atts VAR EQ SINUM SCOLON 
            { parser.Tree.reduce(5,"atts",0);
              HashMap RESULT =null;
		int tableft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int tabright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		HashMap tab = (HashMap)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int valueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer value = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                        tab.put(name, value);
                        RESULT = tab;
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("atts",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // if ::= QUM bool_exp OC mv_list CC 
            { parser.Tree.reduce(5,"if",0);
              Integer[] RESULT =null;
		int boolleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int boolright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Boolean bool = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int mvleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int mvright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer[] mv = (Integer[])((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
                                            if(bool == true){
                                                RESULT = mv;
                                            }
                                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("if",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // if ::= QUM bool_exp OC mv_list CC else 
            { parser.Tree.reduce(6,"if",0);
              Integer[] RESULT =null;
		int boolleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int boolright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Boolean bool = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int mvleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int mvright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Integer[] mv = (Integer[])((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int elsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int elsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer[] els = (Integer[])((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                                if(bool == true){
                                                    RESULT = mv;
                                                } else if(bool == false){
                                                    RESULT = els;
                                                }
                                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("if",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // else ::= ELS_WD OC emv_list CC 
            { parser.Tree.reduce(4,"else",0);
              Integer[] RESULT =null;
		int emvleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int emvright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer[] emv = (Integer[])((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("else",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // bool_exp ::= variable_name_and_attribute EQ EQ SINUM 
            { parser.Tree.reduce(4,"bool_exp",0);
              Boolean RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Integer val = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int inumleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int inumright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer inum = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            if(val.equals(inum)){
                RESULT = true;
            }
            else{
                RESULT = false;
            }
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bool_exp",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // bool_exp ::= NOT_WD bool_exp 
            { parser.Tree.reduce(2,"bool_exp",0);
              Boolean RESULT =null;
		int boolleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int boolright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Boolean bool = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = !bool; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bool_exp",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // bool_exp ::= bool_exp AND_WD bool_exp 
            { parser.Tree.reduce(3,"bool_exp",0);
              Boolean RESULT =null;
		int bool1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bool1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Boolean bool1 = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bool2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bool2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Boolean bool2 = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = bool1 && bool2; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bool_exp",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // bool_exp ::= bool_exp OR_WD bool_exp 
            { parser.Tree.reduce(3,"bool_exp",0);
              Boolean RESULT =null;
		int bool1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bool1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Boolean bool1 = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bool2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bool2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Boolean bool2 = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = bool1 || bool2; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bool_exp",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // bool_exp ::= OP bool_exp CP 
            { parser.Tree.reduce(3,"bool_exp",0);
              Boolean RESULT =null;
		int boolleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int boolright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Boolean bool = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = bool; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bool_exp",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // variable_name_and_attribute ::= VAR DOT VAR 
            { parser.Tree.reduce(3,"variable_name_and_attribute",0);
              Integer RESULT =null;
		int carleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int carright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String car = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int attleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int attright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String att = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    HashMap<String, Integer> caratts = parser.table.get(car);
                    Integer attval = caratts.get(att);
                    RESULT = attval;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("variable_name_and_attribute",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // variable_name_and_attribute ::= VAR DOT VAR SINUM 
            { parser.Tree.reduce(4,"variable_name_and_attribute",0);
              Integer RESULT =null;
		int carleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int carright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String car = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int attleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int attright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String att = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer id = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    HashMap<String, Integer> caratts = parser.table.get(car);
                    Integer attval = caratts.get(att+id);
                    RESULT = attval;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("variable_name_and_attribute",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // mv_list ::= MV_WD SINUM COMMA SINUM COMMA FUE_WD SINUM SCOLON 
            { parser.Tree.reduce(8,"mv_list",0);
              Integer[] RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Integer x = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Integer y = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer f = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
                                                                        Boolean res = (Boolean)parser.stack(-9);
                                                                        if(res == true){
                                                                            Integer[] a = (Integer[])parser.stack(-11);
                                                                            a[0] = a[0] + x;
                                                                            a[1] = a[1] + y;                                                                            a[2] = a[2] + f;
                                                                            RESULT = a;
                                                                            System.out.println("x: " + RESULT[0] + " y: " + RESULT[1] + " FUEL: " + RESULT[2]);
                                                                        }
                                                                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("mv_list",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // mv_list ::= mv_list MV_WD SINUM COMMA SINUM COMMA FUE_WD SINUM SCOLON 
            { parser.Tree.reduce(9,"mv_list",0);
              Integer[] RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Integer[] a = (Integer[])((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Integer x = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Integer y = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer f = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                                                                        Boolean res = (Boolean)parser.stack(-10);
                                                                        if(res == true){
                                                                            a[0] = a[0] + x;
                                                                            a[1] = a[1] + y;
                                                                            a[2] = a[2] + f;
                                                                            RESULT = a;
                                                                            System.out.println("x: " + RESULT[0] + " y: " + RESULT[1] + " FUEL: " + RESULT[2]);
                                                                        }
                                                                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("mv_list",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // emv_list ::= MV_WD SINUM COMMA SINUM COMMA FUE_WD SINUM SCOLON 
            { parser.Tree.reduce(8,"emv_list",0);
              Integer[] RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Integer x = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Integer y = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer f = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                                                                        Boolean res = (Boolean)parser.stack(-13);
                                                                        if(res == false){
                                                                            Integer[] a = (Integer[])parser.stack(-15);
                                                                            a[0] = a[0] + x;
                                                                            a[1] = a[1] + y;                                                                            a[2] = a[2] + f;
                                                                            RESULT = a;
                                                                            System.out.println("x: " + RESULT[0] + " y: " + RESULT[1] + " FUEL: " + RESULT[2]);
                                                                        }
                                                                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("emv_list",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // emv_list ::= emv_list MV_WD SINUM COMMA SINUM COMMA FUE_WD SINUM SCOLON 
            { parser.Tree.reduce(9,"emv_list",0);
              Integer[] RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Integer[] a = (Integer[])((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Integer x = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Integer y = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer f = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
                                                                        Boolean res = (Boolean)parser.stack(-14);
                                                                        if(res == false){
                                                                            a[0] = a[0] + x;
                                                                            a[1] = a[1] + y;
                                                                            a[2] = a[2] + f;
                                                                            RESULT = a;
                                                                            System.out.println("x: " + RESULT[0] + " y: " + RESULT[1] + " FUEL: " + RESULT[2]);
                                                                        }
                                                                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("emv_list",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // fuel ::= FUE_WD INC_WD COLON MIN_WD OP min CP 
            { parser.Tree.reduce(7,"fuel",0);
              Integer[] RESULT =null;
		int minleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int minright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer min = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
                                                    Integer[] a = (Integer[])parser.stack(-7);
                                                    a[2] = a[2] + min;
                                                    RESULT = a;
                                                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("fuel",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // fuel ::= FUE_WD INC_WD COLON MAX_WD OP max CP 
            { parser.Tree.reduce(7,"fuel",0);
              Integer[] RESULT =null;
		int maxleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int maxright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer max = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                                            Integer[] a = (Integer[])parser.stack(-7);
                                            a[2] = a[2] + max;
                                            RESULT = a;
                                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("fuel",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // fuel ::= FUE_WD DECR_WD COLON MIN_WD OP min CP 
            { parser.Tree.reduce(7,"fuel",0);
              Integer[] RESULT =null;
		int minleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int minright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer min = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
                                            Integer[] a = (Integer[])parser.stack(-7);
                                            a[2] = a[2] - min;
                                            RESULT = a;
                                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("fuel",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // fuel ::= FUE_WD DECR_WD COLON MAX_WD OP max CP 
            { parser.Tree.reduce(7,"fuel",0);
              Integer[] RESULT =null;
		int maxleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int maxright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer max = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
                                            Integer[] a = (Integer[])parser.stack(-7);
                                            a[2] = a[2] - max;
                                            RESULT = a;
                                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("fuel",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // min ::= variable_name_and_attribute 
            { parser.Tree.reduce(1,"min",0);
              Integer RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer name = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                            RESULT = name;
                                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("min",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // min ::= min COMMA variable_name_and_attribute 
            { parser.Tree.reduce(3,"min",0);
              Integer RESULT =null;
		int fvalleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int fvalright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Integer fval = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int svalleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int svalright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer sval = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                                    if((Integer)sval < (Integer)fval){
                                                        RESULT = sval;
                                                    }else{
                                                        RESULT = fval;
                                                    }
                                                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("min",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // min ::= SINUM 
            { parser.Tree.reduce(1,"min",0);
              Integer RESULT =null;
		int inumleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int inumright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer inum = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                RESULT = inum;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("min",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // min ::= min COMMA SINUM 
            { parser.Tree.reduce(3,"min",0);
              Integer RESULT =null;
		int fvalleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int fvalright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Integer fval = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int inumleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int inumright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer inum = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                            if((Integer)inum < (Integer)fval){
                                RESULT = inum;
                            }else{
                                RESULT = fval;
                            }
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("min",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // max ::= variable_name_and_attribute 
            { parser.Tree.reduce(1,"max",0);
              Integer RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer name = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                            RESULT = name;
                                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("max",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // max ::= max COMMA variable_name_and_attribute 
            { parser.Tree.reduce(3,"max",0);
              Integer RESULT =null;
		int fvalleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int fvalright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Integer fval = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int svalleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int svalright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer sval = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                                    if(sval > (Integer)fval){
                                                        RESULT = sval;
                                                    }else{
                                                        RESULT = fval;
                                                    }
                                                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("max",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // max ::= SINUM 
            { parser.Tree.reduce(1,"max",0);
              Integer RESULT =null;
		int inumleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int inumright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer inum = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                RESULT = inum;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("max",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // max ::= max COMMA SINUM 
            { parser.Tree.reduce(3,"max",0);
              Integer RESULT =null;
		int fvalleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int fvalright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Integer fval = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int inumleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int inumright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer inum = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                            if((Integer)inum > (Integer)fval){
                                RESULT = inum;
                            }else{
                                RESULT = fval;
                            }
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("max",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
