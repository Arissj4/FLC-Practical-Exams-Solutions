// DO NOT EDIT
// Generated by JFlex 1.8.2 http://jflex.de/
// source: scanner.jflex

import java_cup.runtime.*;


// See https://github.com/jflex-de/jflex/issues/222
@SuppressWarnings("FallThrough")
class Yylex implements java_cup.runtime.Scanner {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\37\u0100\1\u0200\267\u0100\10\u0300\u1020\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\2\3\1\4\22\0\1\1\3\0"+
    "\1\5\1\6\2\0\1\7\1\10\1\11\1\0\1\12"+
    "\1\13\1\14\1\0\1\15\1\16\1\17\1\20\1\21"+
    "\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\0"+
    "\1\31\1\0\1\32\1\0\1\33\1\34\1\35\24\36"+
    "\2\37\1\36\6\0\1\40\1\41\1\42\1\43\1\44"+
    "\1\45\2\41\1\46\2\41\1\47\1\50\1\51\1\52"+
    "\1\53\1\41\1\54\1\55\1\56\1\57\1\60\1\41"+
    "\1\61\2\41\1\62\1\0\1\63\7\0\1\3\u01a2\0"+
    "\2\3\326\0\u0100\3";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1024];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\2\2\2\1\1\3\1\4\1\5\1\6"+
    "\1\7\6\10\1\11\1\12\1\13\1\14\13\15\1\16"+
    "\1\17\1\20\1\0\4\10\2\0\4\10\7\15\1\21"+
    "\1\15\1\22\2\15\2\10\5\0\2\10\1\0\1\23"+
    "\4\15\1\24\1\25\1\26\1\15\1\27\6\0\2\10"+
    "\2\0\2\15\1\30\1\31\2\15\6\0\1\10\1\0"+
    "\4\15\3\0\1\32\4\0\4\15\2\0\1\32\5\0"+
    "\1\33\3\15\1\34\4\0\2\15\1\35\4\0\1\36"+
    "\1\37\20\0\1\40\16\0\2\40\1\0\14\40\1\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[191];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\64\0\64\0\150\0\234\0\320\0\64\0\64"+
    "\0\64\0\u0104\0\64\0\u0138\0\u016c\0\u01a0\0\u01d4\0\u0208"+
    "\0\u023c\0\64\0\64\0\64\0\64\0\u0270\0\u02a4\0\u02d8"+
    "\0\u030c\0\u0340\0\u0374\0\u03a8\0\u03dc\0\u0410\0\u0444\0\u0478"+
    "\0\64\0\64\0\64\0\320\0\u04ac\0\u04e0\0\u0514\0\u0548"+
    "\0\u057c\0\u05b0\0\u05e4\0\u0618\0\u064c\0\u0680\0\u06b4\0\u06e8"+
    "\0\u071c\0\u0750\0\u0784\0\u07b8\0\u07ec\0\u0270\0\u0820\0\u0270"+
    "\0\u0854\0\u0888\0\u08bc\0\u08f0\0\u0924\0\u0958\0\u098c\0\u09c0"+
    "\0\u09f4\0\u0a28\0\u0a5c\0\u0a90\0\u0270\0\u0ac4\0\u0af8\0\u0b2c"+
    "\0\u0b60\0\u0270\0\u0270\0\u0270\0\u0b94\0\u0270\0\u0bc8\0\u0bfc"+
    "\0\u0c30\0\u0c64\0\u0c98\0\u0ccc\0\u0d00\0\u0d34\0\u0d68\0\u0d9c"+
    "\0\u0dd0\0\u0e04\0\u0270\0\u0270\0\u0e38\0\u0e6c\0\u0ea0\0\u0ed4"+
    "\0\u0f08\0\u0f3c\0\u0f70\0\u0fa4\0\u0fd8\0\u100c\0\u1040\0\u1074"+
    "\0\u10a8\0\u10dc\0\u1110\0\u1144\0\u1178\0\u11ac\0\u11e0\0\u1214"+
    "\0\u1248\0\u127c\0\u12b0\0\u12e4\0\u1318\0\u134c\0\u1380\0\u13b4"+
    "\0\u0f08\0\u13e8\0\u141c\0\u1450\0\u1484\0\u14b8\0\u0270\0\u14ec"+
    "\0\u1520\0\u1554\0\64\0\u1588\0\u15bc\0\u15f0\0\u1624\0\u1658"+
    "\0\u168c\0\u0270\0\u16c0\0\u16f4\0\u1728\0\u175c\0\u0270\0\u0270"+
    "\0\u1790\0\u17c4\0\u17f8\0\u182c\0\u1860\0\u1894\0\u18c8\0\u18fc"+
    "\0\u1930\0\u1964\0\u1998\0\u19cc\0\u1a00\0\u1a34\0\u1a68\0\u1a9c"+
    "\0\u1ad0\0\u1b04\0\u1b38\0\u1b6c\0\u1ba0\0\u1bd4\0\u1c08\0\u1c3c"+
    "\0\u1c70\0\u1ca4\0\u1cd8\0\u1d0c\0\u1d40\0\u1d74\0\u1da8\0\u1ddc"+
    "\0\u1e10\0\u1e44\0\u1e78\0\u1eac\0\u1ee0\0\u1f14\0\u1f48\0\u1f7c"+
    "\0\u1fb0\0\u1fe4\0\u2018\0\u204c\0\u2080\0\u20b4\0\u20e8";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[191];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\0\1\4\1\5\1\6\1\7\1\10"+
    "\1\2\1\11\1\12\1\13\1\14\1\15\1\16\1\17"+
    "\1\16\1\17\1\16\1\17\1\20\1\21\1\22\1\23"+
    "\1\24\1\25\5\26\1\27\2\26\1\30\1\31\1\32"+
    "\1\33\1\26\1\34\1\35\1\36\1\37\1\26\1\40"+
    "\4\26\1\41\1\42\66\0\1\3\66\0\1\43\56\0"+
    "\2\44\1\3\1\44\1\4\57\44\15\0\1\45\1\46"+
    "\1\16\1\17\1\16\1\17\1\16\1\17\1\16\1\17"+
    "\52\0\10\21\1\47\1\50\10\0\1\51\22\52\17\0"+
    "\1\53\1\54\1\55\1\50\1\55\1\50\1\55\1\56"+
    "\1\45\1\21\52\0\1\45\1\21\1\45\1\21\1\45"+
    "\1\21\1\45\1\21\1\45\1\21\10\0\1\51\22\52"+
    "\17\0\1\45\1\21\1\45\1\21\1\45\1\21\1\45"+
    "\1\21\1\45\1\21\52\0\1\45\1\21\1\45\1\21"+
    "\1\45\1\21\1\45\3\21\10\0\1\51\22\52\17\0"+
    "\12\21\70\0\27\26\35\0\16\26\1\57\10\26\35\0"+
    "\11\26\1\60\15\26\35\0\14\26\1\61\12\26\35\0"+
    "\24\26\1\62\2\26\35\0\16\26\1\63\10\26\35\0"+
    "\5\26\1\64\5\26\1\65\11\26\1\66\1\26\35\0"+
    "\17\26\1\67\7\26\35\0\21\26\1\70\5\26\35\0"+
    "\17\26\1\71\7\26\35\0\11\26\1\72\15\26\17\0"+
    "\12\21\10\0\1\51\22\52\17\0\1\73\1\74\1\73"+
    "\1\21\1\45\1\21\1\45\1\21\1\45\1\21\52\0"+
    "\12\21\1\75\51\0\12\21\1\76\73\0\1\77\64\0"+
    "\22\100\13\0\1\101\1\0\1\101\1\0\2\102\10\21"+
    "\1\76\7\0\1\51\22\52\13\0\1\101\1\0\1\101"+
    "\1\0\1\102\1\103\10\21\1\76\51\0\12\21\1\76"+
    "\7\0\1\51\22\52\17\0\12\21\1\104\67\0\10\26"+
    "\1\105\16\26\35\0\7\26\1\106\17\26\35\0\22\26"+
    "\1\107\4\26\35\0\11\26\1\110\15\26\35\0\7\26"+
    "\1\111\17\26\35\0\26\26\1\112\35\0\16\26\1\113"+
    "\10\26\35\0\23\26\1\114\3\26\35\0\22\26\1\115"+
    "\4\26\35\0\23\26\1\116\3\26\17\0\1\45\1\21"+
    "\1\45\1\21\1\45\5\21\10\0\1\51\22\52\17\0"+
    "\1\45\1\21\1\45\1\21\1\45\5\21\53\0\1\117"+
    "\4\120\56\0\6\121\100\0\1\122\64\0\22\123\20\0"+
    "\1\124\56\0\1\101\1\0\1\101\1\0\2\125\10\21"+
    "\46\0\1\101\1\0\1\101\1\0\1\125\1\126\10\21"+
    "\52\0\2\127\1\130\77\0\14\26\1\131\4\26\1\132"+
    "\5\26\35\0\11\26\1\133\15\26\35\0\14\26\1\134"+
    "\12\26\35\0\21\26\1\135\5\26\35\0\13\26\1\136"+
    "\13\26\21\0\10\137\52\0\12\137\52\0\12\140\74\0"+
    "\1\141\64\0\22\142\17\0\1\143\1\144\56\0\1\101"+
    "\1\0\1\101\1\0\2\145\10\21\46\0\1\101\1\0"+
    "\1\101\1\0\1\145\11\21\52\0\12\146\52\0\2\146"+
    "\100\0\5\26\1\147\21\26\35\0\11\26\1\150\15\26"+
    "\35\0\11\26\1\151\15\26\35\0\23\26\1\152\3\26"+
    "\31\0\1\153\63\0\1\154\73\0\1\155\64\0\22\156"+
    "\13\0\1\157\1\0\1\157\1\0\2\160\56\0\1\157"+
    "\1\0\1\157\1\0\1\160\1\161\56\0\1\101\1\0"+
    "\1\101\1\0\12\21\64\0\1\162\67\0\21\26\1\163"+
    "\5\26\35\0\5\26\1\164\21\26\35\0\5\26\1\165"+
    "\21\26\35\0\13\26\1\166\13\26\22\0\1\167\2\170"+
    "\56\0\6\170\100\0\1\171\64\0\22\172\20\0\1\173"+
    "\56\0\1\157\1\0\1\157\1\0\2\174\56\0\1\157"+
    "\1\0\1\157\1\0\1\174\1\175\62\0\3\170\1\176"+
    "\76\0\11\26\1\177\15\26\35\0\22\26\1\200\4\26"+
    "\35\0\22\26\1\201\4\26\35\0\17\26\1\202\7\26"+
    "\23\0\6\203\52\0\12\203\75\0\22\204\17\0\1\205"+
    "\1\206\56\0\1\157\1\0\1\157\1\0\2\207\56\0"+
    "\1\157\1\0\1\157\1\0\1\207\63\0\10\203\72\0"+
    "\11\26\1\210\15\26\35\0\11\26\1\211\15\26\35\0"+
    "\16\26\1\212\10\26\35\0\1\213\41\0\1\214\1\0"+
    "\1\214\1\0\2\215\56\0\1\214\1\0\1\214\1\0"+
    "\1\215\1\216\56\0\1\157\1\0\1\157\103\0\22\26"+
    "\1\217\4\26\35\0\22\26\1\220\4\26\36\0\1\221"+
    "\45\0\1\222\56\0\1\214\1\0\1\214\1\0\2\223"+
    "\56\0\1\214\1\0\1\214\1\0\1\223\1\224\102\0"+
    "\1\156\43\0\1\225\1\226\56\0\1\214\1\0\1\214"+
    "\1\0\2\227\56\0\1\214\1\0\1\214\1\0\1\227"+
    "\57\0\1\230\1\0\1\230\1\0\2\231\56\0\1\230"+
    "\1\0\1\230\1\0\1\231\1\232\56\0\1\214\1\0"+
    "\1\214\66\0\1\233\56\0\1\230\1\0\1\230\1\0"+
    "\2\234\56\0\1\230\1\0\1\230\1\0\1\234\1\235"+
    "\62\0\1\236\1\237\56\0\1\230\1\0\1\230\1\0"+
    "\2\240\56\0\1\230\1\0\1\230\1\0\1\240\57\0"+
    "\1\241\1\0\1\241\1\0\2\242\56\0\1\241\1\0"+
    "\1\241\1\0\1\242\1\243\56\0\1\230\1\0\1\230"+
    "\66\0\1\244\56\0\1\241\1\0\1\241\1\0\2\245"+
    "\56\0\1\241\1\0\1\241\1\0\1\245\1\246\62\0"+
    "\1\247\1\250\56\0\1\241\1\0\1\241\1\0\2\251"+
    "\56\0\1\241\1\0\1\241\1\0\1\251\57\0\1\252"+
    "\1\0\1\252\1\0\2\253\56\0\1\252\1\0\1\252"+
    "\1\0\1\253\1\254\56\0\1\241\1\0\1\241\66\0"+
    "\1\255\56\0\1\252\1\0\1\252\1\0\2\256\56\0"+
    "\1\252\1\0\1\252\1\0\1\256\1\257\62\0\1\260"+
    "\1\261\56\0\1\252\1\0\1\252\1\0\2\262\56\0"+
    "\1\252\1\0\1\252\1\0\1\262\63\0\1\263\1\264"+
    "\62\0\1\263\1\265\56\0\1\252\1\0\1\252\65\0"+
    "\1\266\1\267\62\0\1\270\1\271\62\0\1\270\1\272"+
    "\62\0\1\241\1\273\62\0\1\274\1\275\56\0\1\252"+
    "\1\0\1\252\1\0\1\276\1\275\56\0\1\252\1\0"+
    "\1\252\1\0\1\274\1\275\56\0\1\252\1\0\1\252"+
    "\1\0\1\274\1\277\62\0\1\247\1\277\56\0\1\252"+
    "\1\0\1\252\1\0\1\253\1\277\56\0\1\252\1\0"+
    "\1\252\1\0\1\247\1\277\56\0\1\252\1\0\1\252"+
    "\1\0\1\256\1\277\56\0\1\252\1\0\1\252\1\0"+
    "\1\247\1\250\45\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[8476];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\2\11\3\1\3\11\1\1\1\11\6\1\4\11"+
    "\13\1\3\11\1\0\4\1\2\0\22\1\5\0\2\1"+
    "\1\0\12\1\6\0\2\1\2\0\6\1\6\0\1\1"+
    "\1\0\4\1\3\0\1\1\4\0\4\1\2\0\1\1"+
    "\5\0\4\1\1\11\4\0\3\1\4\0\2\1\20\0"+
    "\1\1\16\0\2\1\1\0\14\1\1\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[191];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;

  /* user code: */
    private Symbol sym(int type){
        return new Symbol(type, yyline, yycolumn);
    }

    private Symbol sym(int type, Object value){
        return new Symbol(type, yyline, yycolumn, value);
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Yylex(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException(
          "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE) {
      zzBuffer = new char[ZZ_BUFFERSIZE];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
  yyclose();    }
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  @Override  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { System.out.println("Scanner Error: " + yytext());
            }
            // fall through
          case 33: break;
          case 2:
            { ;
            }
            // fall through
          case 34: break;
          case 3:
            { return sym(sym.OP);
            }
            // fall through
          case 35: break;
          case 4:
            { return sym(sym.CP);
            }
            // fall through
          case 36: break;
          case 5:
            { return sym(sym.COMMA);
            }
            // fall through
          case 37: break;
          case 6:
            { return sym(sym.DASH);
            }
            // fall through
          case 38: break;
          case 7:
            { return sym(sym.DOT);
            }
            // fall through
          case 39: break;
          case 8:
            { return sym(sym.SINUM, new Integer(yytext()));
            }
            // fall through
          case 40: break;
          case 9:
            { return sym(sym.COLON);
            }
            // fall through
          case 41: break;
          case 10:
            { return sym(sym.SCOLON);
            }
            // fall through
          case 42: break;
          case 11:
            { return sym(sym.EQ);
            }
            // fall through
          case 43: break;
          case 12:
            { return sym(sym.QUM);
            }
            // fall through
          case 44: break;
          case 13:
            { return sym(sym.VAR, new String(yytext()));
            }
            // fall through
          case 45: break;
          case 14:
            { return sym(sym.OC);
            }
            // fall through
          case 46: break;
          case 15:
            { return sym(sym.CC);
            }
            // fall through
          case 47: break;
          case 16:
            { return sym(sym.SEP);
            }
            // fall through
          case 48: break;
          case 17:
            { return sym(sym.MV_WD, new String(yytext()));
            }
            // fall through
          case 49: break;
          case 18:
            { return sym(sym.OR_WD, new String(yytext()));
            }
            // fall through
          case 50: break;
          case 19:
            { return sym(sym.AND_WD, new String(yytext()));
            }
            // fall through
          case 51: break;
          case 20:
            { return sym(sym.MAX_WD, new String(yytext()));
            }
            // fall through
          case 52: break;
          case 21:
            { return sym(sym.MIN_WD, new String(yytext()));
            }
            // fall through
          case 53: break;
          case 22:
            { return sym(sym.NOT_WD, new String(yytext()));
            }
            // fall through
          case 54: break;
          case 23:
            { return sym(sym.SET_WD, new String(yytext()));
            }
            // fall through
          case 55: break;
          case 24:
            { return sym(sym.ELS_WD, new String(yytext()));
            }
            // fall through
          case 56: break;
          case 25:
            { return sym(sym.FUE_WD, new String(yytext()));
            }
            // fall through
          case 57: break;
          case 26:
            { return sym(sym.TOK1);
            }
            // fall through
          case 58: break;
          case 27:
            { return sym(sym.DEC_WD, new String(yytext()));
            }
            // fall through
          case 59: break;
          case 28:
            { return sym(sym.TOK3);
            }
            // fall through
          case 60: break;
          case 29:
            { return sym(sym.POS_WD, new String(yytext()));
            }
            // fall through
          case 61: break;
          case 30:
            { return sym(sym.DECR_WD, new String(yytext()));
            }
            // fall through
          case 62: break;
          case 31:
            { return sym(sym.INC_WD, new String(yytext()));
            }
            // fall through
          case 63: break;
          case 32:
            { return sym(sym.TOK2);
            }
            // fall through
          case 64: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
